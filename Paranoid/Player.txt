class RolfBellmer : PlayerPawn
{
	double ModelHeightMul;

	override void BeginPlay()
	{
		GetModelHeightMul();
		ModelHeightSetup();
		super.BeginPlay();
	}
	void GetModelHeightMul()
	{
		if(level.PixelStretch == 1.0)
			ModelHeightMul = 1.2;
		else
			ModelHeightMul = 1.0;
	}
	virtual void ModelHeightSetup()
	{
		ViewHeight = 56 * ModelHeightMul;
		AttackZOffset = 24 * ModelHeightMul;
	}
	bool scientist,otis;
	Default
	{
		+NOSKIN
		Height 60;
		Player.DisplayName "Rolf Bellmer";
		Player.ViewHeight 56;
		Player.AttackZOffset 24;
		Player.WeaponSlot 1,"HLCrowbar";
		Player.WeaponSlot 2,"HLPistol","HLDesertEagle","HLMagnum";
		Player.WeaponSlot 3,"HLHornetGun","HLShotgun";
		Player.WeaponSlot 4,"HLXBow","HLAssaultRifle";
		Player.WeaponSlot 5,"HLRPG";
		Player.WeaponSlot 6,"HLGluonGun";
		Player.StartItem "HLCrowbar";
		Player.StartItem "HEVSuit";
		Player.Face "HEV";
		Player.Portrait "HLHELMET";
		BloodType "HLBlood";
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 2;
		HLI2 AB 2;
		Loop;
	See:
		HLR1 ABCDEFGHIJKLMNOPQRSTUVW 1;
		Loop;
	Missile:
		HLA1 YZ[\] 1;
		HLA2 AB 1;
		HLA1 VUTRSQPONMLKJIHGFEDCBA 1;
		Goto Spawn;
	Pain:
		HLP1 A 0 A_HLPainSelect;
		HLP1 A 1
		{
			if(otis)
			{
				if(random(0,3))
					A_StartSound("halflife/monsters/otis/pain", CHAN_VOICE);
			}
			else
				A_HLHEVPain();
		}
		HLP1 DGJMPSU 1;
		Goto Spawn;
	Pain.Drowning:
		HLP1 A 0 A_HLDrownPainSelect;
		HLP1 A 1
		{
			if(otis)
			{
				if(random(0,3))
					A_StartSound("halflife/monsters/otis/pain", CHAN_VOICE);
			}
			else
				A_StartSound("HLPlayerDrowning", CHAN_6);
		}
		HLP1 DGJMPSU 1;
		Goto Spawn;
	Death:
		HLD1 A 0 A_HLDeathSelect;
		HLD1 A 2
		{
			if(otis)
				A_StartSound("halflife/monsters/otis/death", CHAN_VOICE);
			else
			{
				A_StartSound("HLPlayerHEVFail", CHAN_7);
				A_StartSound("HLPlayerHEVFailBeep", CHAN_6);
			}
			A_NoBlocking();
			A_ChangeModel("", 2, flags:CMDL_HIDEMODEL);
		}
		HLD1 BCDEFG 2;
		HLD1 H 2 A_StartSound("halflife/weapons/bodydrop");
		HLD1 IJKL 2;
		HLD1 M -1;
		Stop;

	ScientistSpawn:
		HLI2 CDEFGHIJKLMNOPQ 5;
		Loop;
	ScientistSee:
		HLW2 ABCDEFGHIJKLMNOP 2;
		Loop;
	ScientistMissile:
		HLI2 C 12;
		Goto ScientistSpawn;
	ScientistPain:
	ScientistPain.Drowning:
		HLP2 A 1 A_StartSound("scientist/pain", CHAN_VOICE);
		HLP2 BCDEFGHI 1;
		Goto ScientistSpawn;
	ScientistDeath:
		HLD2 A 1 A_StartSound("scientist/death", CHAN_VOICE);
		HLD2 BC 1;
		HLD2 D 1 A_NoBlocking;
		HLD2 EFGHIJKLMNOPQRS 1;
		HLD2 T 1 A_StartSound("halflife/weapons/bodydrop");
		HLD2 UVW 1;
		HLD2 X -1;
		Stop;

	ShephardSpawn:
		OFI1 ABCDEFGHIJK 2;
		Loop;
	ShephardSee:
		OFR1 ABCDEFGHIJKLMNOPQRSTUVWXY 1;
		Loop;
	ShephardMissile:
		OFA2 \] 1;
		OFA3 ABCDEFGHIJK 1;
		Goto ShephardSpawn;
	ShephardPain:
	ShephardPain.Drowning:
		OFP1 ABCDEFGH 1;
		Goto ShephardSpawn;
	ShephardDeath:
		OFD1 A 1
		{
			A_NoBlocking();
			A_ChangeModel("", 2, flags:CMDL_HIDEMODEL);
		}
		OFD1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		OFD2 A 1 A_StartSound("halflife/weapons/bodydrop");
		OFD2 BCDEF 1;
		OFD2 G -1;
		Stop;

	IvanSpawn:
		IVI1 A 1;
		Loop;
	IvanSee:
		IVR1 ABCDEFGHIJKLMNOPQRST 1;
		Loop;
	IvanMissile:
		IVA1 ABCDEFGHIJKLM 1;
		Goto IvanSpawn;
	IvanPain:
	IvanPain.Drowning:
		IVP1 ABCDEFGHIJKL 1;
		Goto IvanSpawn;
	IvanDeath:
		IVD1 A 1 A_NoBlocking;
		IVD1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		IVD2 A 1 A_StartSound("halflife/weapons/bodydrop");
		IVD2 BCDEFGHIJK 1;
		IVD2 L -1;
		Stop;
	}
	override void Tick()
	{
		if(InSpawnState())
			HLSetState('Spawn');
		super.tick();
	}
	override void PlayIdle()
	{
		if(InSeeState())
			HLSetState("Spawn");
	}
	override void PlayRunning()
	{
		if(InSpawnState())
			HLSetState("See");
	}
	override void PlayAttacking()
		{HLSetState("Missile",1);}
	void A_HLPainSelect()
		{HLSetState("Pain");}
	void A_HLDrownPainSelect()
		{HLSetState("Pain.Drowning");}
	void A_HLDeathSelect()
		{HLSetState("Death");}
	void A_HLHEVPain()
	{
		A_Pain();
		if(!random(0,3))
		{
			if(health<25)
				A_StartSound("HLPlayerPain25", CHAN_7);
			else if(health<50)
				A_StartSound("HLPlayerPain50", CHAN_7);
			else if(health<75)
				A_StartSound("HLPlayerPain75", CHAN_7);
		}
	}
	static const name HLskin[]={'Helmet','Freeman','Shephard','BlackOps','Robo','Ivan'};
	static const statelabel BaseStates[]={"Spawn","See","Missile","Pain","Pain.Drowning","Death"};
	static const statelabel ScientistStates[]={"ScientistSpawn","ScientistSee","ScientistMissile","ScientistPain","ScientistPain.Drowning","ScientistDeath"};
	static const statelabel ShephardStates[]={"ShephardSpawn","ShephardSee","ShephardMissile","ShephardPain","ShephardPain.Drowning","ShephardDeath"};
	static const statelabel IvanStates[]={"IvanSpawn","IvanSee","IvanMissile","IvanPain","IvanPain.Drowning","IvanDeath"};

	static const name modelskinBase1[]=
	{
		'w_suit_002.png',
		'w_suit_000.png',
		'w_suit_001.png',
		'w_suit_003.png',
		'w_suit_005.png',
		'w_suit_007.png',
		'w_suit_004.png',
		'w_suit_006.png',
		'w_suit_002.png',
		'w_suit_002.png',
		'w_suit_002.png'
	};
	static const name modelskinBase2[]=
	{
		'w_suit_003.png',
		'hev_scientist_head_001.png',
		'hev_scientist_head_002.png',
		'hev_scientist_head_003.png'
	};
	static const name modelskinBase3[]=
	{
		'w_9mmhandgun.png',
		'v_9mmhandgun_main_002.png'
	};
	static const name modelskinScientist1[]=
	{
		'scientist_body_000.png',
		'scientist_body_001.png',
		'scientist_body_002.png',
		'scientist_body_003.png',
		'scientist_body_004.png'
	};
	static const name modelskinScientist2[]=
	{
		'scientist_head3_000.png',
		'scientist_head1_001.png',
		'scientist_head3_002.png'
	};
	static const name modelskinFreeman2[]=
	{
		'w_suit_002.png',
		'freeman_head_001.png',
		'nochrome.png',
		'nochrome.png'
	};

	static const name modelskinOtis1[]=
	{
		'barney_body_001.png',
		'barney_body_002.png',
		'barney_body_003.png'
	};
	static const name modelskinOtis2[]=
	{
		'barney_head_001.png',
		'barney_head_002.png',
		'otis_head_002.png',
		'otis_head_003.png',
		'otis_head_004.png',
		'otis_head_005.png'
	};
	static const name modelskinShepard1[]=
	{
		'hgrunt_body_000.png',
		'hgrunt_body_001.png',
		'hgrunt_body_002.png',
		'hgrunt_body_003.png',
		'hgrunt_body_004.png'
	};
	static const name modelskinShepard2[]=
	{
		'hgrunt_head1_000.png',
		'hgrunt_head1_001.png',
		'hgrunt_head1_002.png',
		'hgrunt_head1_003.png'
	};
	static const name modelskinBlackOps1[]=
	{
		'massn_body_000.png',
		'massn_body_001.png',
		'massn_body_002.png'
	};
	static const name modelskinBlackOps2[]=
	{
		'massn_head_000.png',
		'massn_head_001.png'
	};
	static const name modelskinRobo1[]=
	{
		'robot_body_000.png',
		'robot_body_001.png',
		'robot_body_002.png',
		'robot_body_003.png',
		'robot_body_004.png'
	};
	static const name modelskinRobo2[]=
	{
		'robot_body_001.png',
		'robot_body_002.png',
		'robot_body_004.png'
	};
	static const name modelskinRobo3[]=
	{
		'robot_body_000.png',
		'robot_body_001.png',
		'nochrome.png',
		'robot_body_000.png',
		'robot_body_001.png'
	};
	static const name modelskinIvan[]=
	{
		'doctor_000.png',
		'doctor_001.png',
		'doctor_002.png',
		'doctor_003.png',
		'doctor_004.png',
		'doctor_005.png',
		'doctor_006.png',
		'doctor_007.png',
		'doctor_008.png',
		'doctor_009.png',
		'doctor_010.png',
		'doctor_011.png'
	};
	void HLPlayerModelSetup(name skin)
	{
		switch(skin)
		{
		case 'Base':
			for(int i = 0; i <= 10; i++)
				A_ChangeModel("", 0, "Models", "hev_scientist_body.iqm", i, "Models", modelskinBase1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 3; i++)
				A_ChangeModel("", 1, "Models", "hev_scientist_head.iqm", i, "Models", modelskinBase2[i], CMDL_USESURFACESKIN, 0);
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("", 2, "Models", "barney_gun1.iqm", i, "Models", modelskinBase3[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'Scientist':
			for(int i = 0; i <= 4; i++)
				A_ChangeModel("", 0, "Models", "scientist_body.iqm", i, "Models", modelskinScientist1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 2; i++)
				A_ChangeModel("", 1, "Models", "scientist_head3.iqm", i, "Models", modelskinScientist2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 2, flags:CMDL_HIDEMODEL);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'Freeman':
			for(int i = 0; i <= 10; i++)
				A_ChangeModel("", 0, "Models", "hev_scientist_body.iqm", i, "Models", modelskinBase1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 3; i++)
				A_ChangeModel("", 1, "Models", "freeman_head.iqm", i, "Models", modelskinFreeman2[i], CMDL_USESURFACESKIN, 0);
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("", 2, "Models", "barney_gun1.iqm", i, "Models", modelskinBase3[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'Otis':
			for(int i = 0; i <= 10; i++)
				A_ChangeModel("", 0, "Models", "otis_body.iqm", i, "Models", modelskinOtis1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 5; i++)
				A_ChangeModel("", 1, "Models", "otis_head.iqm", i, "Models", modelskinOtis2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 2, "Models", "otis_gun1.iqm", 2, "Models", "v_desert_eagle_main_000.png", 0, 0);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'Shepard':
			for(int i = 0; i <= 4; i++)
				A_ChangeModel("", 0, "Models", "hgrunt_body.iqm", i, "Models", modelskinShepard1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 3; i++)
				A_ChangeModel("", 1, "Models", "hgrunt_head1.iqm", i, "Models", modelskinShepard2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 2, "Models", "hgrunt_arifle.iqm", 2, "Models", "hgrunt_arifle.png", 0, 0);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'BlackOps':
			for(int i = 0; i <= 2; i++)
				A_ChangeModel("", 0, "Models", "massn_body.iqm", i, "Models", modelskinBlackOps1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("", 1, "Models", "massn_head.iqm", i, "Models", modelskinBlackOps2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 2, "Models", "hgrunt_arifle.iqm", 2, "Models", "hgrunt_arifle.png", 0, 0);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		case 'Robo':
			for(int i = 0; i <= 4; i++)
				A_ChangeModel("", 0, "Models", "robot_body.iqm", i, "Models", modelskinRobo1[i], CMDL_USESURFACESKIN);
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("", 1, "Models", "robot_headlegs.iqm", i, "Models", modelskinRobo2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("", 2, "Models", "hgrunt_arifle.iqm", 2, "Models", "hgrunt_arifle.png", 0, 0);
			for(int i = 0; i <= 4; i++)
				A_ChangeModel("", 3, "Models", "robot_arms.iqm", i, "Models", modelskinRobo3[i], CMDL_USESURFACESKIN, 0);
			break;
		case 'Ivan':
			for(int i = 0; i <= 11; i++)
				A_ChangeModel("", 0, "Models", "doctor.iqm", i, "Models", modelskinIvan[i], CMDL_USESURFACESKIN);
			A_ChangeModel("", 1, flags:CMDL_HIDEMODEL);
			A_ChangeModel("", 2, flags:CMDL_HIDEMODEL);
			A_ChangeModel("", 3, flags:CMDL_HIDEMODEL);
			break;
		}
	}

	private void HLSetState(name statetype,bool forced=0)
	{
		int mode,skinnum=CVar.GetCVar("v_multiskin",player).GetInt();
		statelabel stlabel;
		switch(statetype)
		{
		case 'Spawn':			mode=0;break;
		case 'See':				mode=1;break;
		case 'Missile':			mode=2;break;
		case 'Pain':			mode=3;break;
		case 'Pain.Drowning':	mode=4;break;
		case 'Death':			mode=5;break;
		}
		if(otis)
		{
			HLPlayerModelSetup('Otis');
			stlabel=BaseStates[mode];
		}
		else if(skinnum)//&&multiplayer)
		{
			switch(skinnum)
			{
			case 1:
				HLPlayerModelSetup('Freeman');
				stlabel=BaseStates[mode];
				break;
			case 2:
				HLPlayerModelSetup('Shepard');
				stlabel=ShephardStates[mode];
				break;
			case 3:
				HLPlayerModelSetup('BlackOps');
				stlabel=ShephardStates[mode];
				break;
			case 4:
				HLPlayerModelSetup('Robo');
				stlabel=ShephardStates[mode];
				break;
			case 5:
				HLPlayerModelSetup('Ivan');
				stlabel=IvanStates[mode];
				break;
			}
		}
		else if(scientist)
		{
			HLPlayerModelSetup('Scientist');
			stlabel=ScientistStates[mode];
		}
		else
		{
			HLPlayerModelSetup('Base');
			stlabel=BaseStates[mode];
		}
		if(forced||!InStateSequence(CurState,FindState(stlabel)))
			SetStateLabel(stlabel);
	}
	bool InSpawnState()
	{
		if(InStateSequence(CurState,FindState("Spawn"))||
		InStateSequence(CurState,FindState("ScientistSpawn"))||
		InStateSequence(CurState,FindState("ShephardSpawn"))||
		InStateSequence(CurState,FindState("IvanSpawn")))
			return 1;
		return 0;
	}
	bool InSeeState()
	{
		if(InStateSequence(CurState,FindState("See"))||
		InStateSequence(CurState,FindState("ScientistSee"))||
		InStateSequence(CurState,FindState("ShephardSee"))||
		InStateSequence(CurState,FindState("IvanSee")))
			return 1;
		return 0;
	}
}