//Osprey
class Osprey : ModelBase
{
	int bobstate;
	override void tick()
	{
		if(bNOGRAVITY && pos.z != floorz)
		{
			double newz=pos.z-BobSin(bobstate)/2.;
			bobstate=(bobstate+1)&63;
			newz+=BobSin(bobstate)/2.;
			SetZ(newz);
		}
		super.tick();
	}
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'osprey_000.png',
			'osprey_001.png',
			'osprey_002.png',
			'osprey_003.png',
			'osprey_004.png',
			'osprey_005.png',
			'osprey_006.png'
		};
		for(int i = 0; i <= 6; i++)
			A_ChangeModel("", 0, "Models", "osprey.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
	}
	Default
	{
		Radius 3;
		Height 56;
		+DONTTHRUST
		+NOCLIP
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTARGET
		+SHOOTABLE
		+NONSHOOTABLE
		+NOBLOOD
		+NOTRIGGER
		+NOTELEPORT
		+ISMONSTER
		+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 A -1 NODELAY
		{
			SetAnimation('rotor', 17, flags: SAF_LOOP|SAF_NOOVERRIDE);
			A_StartSound("play/osprey", flags: CHANF_LOOPING );
		}
		Stop;
	Land:
		HLI1 A -1 SetAnimation('on_tarmac', 15, flags: SAF_LOOP|SAF_NOOVERRIDE);
		Stop;
	Death:
		HLI1 A 0
		{
			static const name modelskin2[]=
			{
				'dead_osprey_000.png',
				'dead_osprey_001.png',
				'dead_osprey_002.png',
				'dead_osprey_003.png',
				'dead_osprey_004.png',
				'dead_osprey_005.png',
				'dead_osprey_006.png',
				'dead_osprey_007.png',
				'dead_osprey_008.png',
				'dead_osprey_009.png',
				'dead_osprey_010.png',
				'dead_osprey_011.png',
				'dead_osprey_012.png',
				'dead_osprey_013.png'
			};
			for(int i = 0; i <= 13; i++)
				A_ChangeModel("OspreyDead", 0, "Models", "dead_osprey.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN);

			SetAnimation('fly', 45, flags: SAF_LOOP|SAF_NOOVERRIDE);
			A_LowGravity();
			A_Quake(9,16,0,1024);
			A_StopSound();
		}
	DeathLoop:
		HLI1 A 1
		{
			A_HLOspreyPitch();
			for(int i=0;i<2;i++)
			{
				A_HLOspreyExplode();
				A_HLOspreyExplode(3);
			}
			A_StartSound("halflife/weapons/randomexplo", CHAN_AUTO, attenuation:ATTN_NONE);
			A_HLOspreyBigSmoke();
		}
		HLI1 AAAA 1 A_HLOspreyPitch;
		HLI1 A 1
		{
			A_HLOspreyPitch();
			for(int i=0;i<2;i++)
			{
				A_HLOspreyExplode();
				A_HLOspreyExplode(3);
			}
			A_HLOspreyBigSmoke();
		}
		HLI1 AAAAA 1 A_HLOspreyPitch;
		Loop;
	Crash:
		HLI1 A 1
		{
			SetAnimation('crash', 30, endFrame:44);
			pitch=0;
			A_StartSound("halflife/weapons/randomexplo", CHAN_AUTO, attenuation:ATTN_NONE);
			A_Quake(9,40,0,1024);
			A_StartSound("Osprey/Crash", CHAN_AUTO, attenuation:ATTN_NONE);
		}
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 0 A_HLOspreySpark;
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 0 A_HLOspreySpark;
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 A 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
	CrashLoop:
		HLI1 AAAAAAAAAAAA 9 A_HLOspreyBigSmoke;
		HLI1 A -1;
		Stop;
	}
	void A_HLOspreyPitch()
	{
		if(pitch<=22.5)
			pitch+=0.25;
	}
	void A_HLOspreySpark()
	{
		for(int i=0;i<8;i++)
			A_SpawnItemEx("Spark_O1",frandom(-96,96),frandom(-96,96),frandom(32,96),frandom(-4,4),frandom(-4,4),frandom(-4,4));
	}
	void A_HLOspreyExplode(double scalar=1.0)
	{
		bool num;
		actor boom;
		[num,boom]=A_SpawnItemEx("ParanoidExplosion",frandom(-96,96),frandom(-96,96),frandom(0,96));
		boom.A_SetScale(scalar);
	}
	void A_HLOspreyBigSmoke()
	{
		bool num;
		actor smoke;
		[num,smoke]=A_SpawnItemEx("NewExploMediumSmoke",frandom(-96,96),frandom(-96,96),frandom(0,96),0,0,frandom(5,8));
		smoke.A_SetScale(.83);
	}
}

class OspreyDead : Osprey{}

class OspreyBellmer : ModelBase
{
	int bobstate;
	override void tick()
	{
		if(pos.z!=floorz)
		{
			double newz=pos.z-BobSin(bobstate)/2.;
			bobstate=(bobstate+1)&63;
			newz+=BobSin(bobstate)/2.;
			SetZ(newz);
		}
		super.tick();
	}
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'w_suit_002.png',
			'w_suit_000.png',
			'w_suit_001.png',
			'w_suit_003.png',
			'w_suit_005.png',
			'w_suit_007.png',
			'w_suit_004.png',
			'w_suit_006.png',
			'w_suit_002.png',
			'w_suit_002.png',
			'w_suit_002.png'
		};
		static const name modelskin2[]=
		{
			'scientist_head3_000.png',
			'scientist_head1_001.png',
			'w_suit_002.png'
		};
		for(int i = 0; i <= 10; i++)
			A_ChangeModel("", 0, "Models", "hev_scientist_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		for(int i = 0; i <= 2; i++)
			A_ChangeModel("", 1, "Models", "hev_scientist_head2.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
	}
	Default
	{
		Radius 3;
		Height 56;
		+DONTTHRUST
		+NOCLIP
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTARGET
		+SHOOTABLE
		+NONSHOOTABLE
		+NOBLOOD
		+NOTRIGGER
		+NOTELEPORT
		+ISMONSTER
		+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 A -1 NODELAY SetAnimation('idle1', 30, flags: SAF_LOOP|SAF_NOOVERRIDE);
		Stop;
	}
}

//SUV
class SUV : ModelBase
{
	actor glass;
	override void postbeginplay()
	{
		glass=Spawn("SUVGlass",pos);
		glass.angle=angle;
		glass.ChangeTid(tid);
		glass.master=self;
		super.postbeginplay();
	}
	override void tick()
	{
		if(glass)
			glass.A_Warp(AAPTR_MASTER, 0, 0, 0);
		super.tick();
	}
	Default
	{
		Radius 38;
		Height 66;
		+DONTTHRUST
		DeathHeight 66;
		Health 400;
		PainChance 256;
		+ISMONSTER
		+SHOOTABLE
		+NOBLOOD
		+FRIENDLY
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	Pain:
		HLI1 A -1 A_StartSound("SUV/Hit", CHAN_AUTO);
		Stop;
	Death:
		HLI1 B 8
		{
			A_KillChildren();
			A_Explode(128,192);
			A_StartSound("SUV/Explode");
			A_SpawnItemEx("ParanoidExplosion",56,32,40);
			A_SpawnItemEx("ParanoidExplosion",-64,-40,56);
			A_SpawnItemEx("ParanoidExplosion",frandom(-16,16),-40,32);
			A_SpawnItemEx("ParanoidExplosion",frandom(-16,16),40,32);
			for(int i=0;i<16;i++)
				A_SpawnItemEx("Spark_O1",frandom(-96,96),frandom(-96,96),frandom(32,96),frandom(-4,4),frandom(-4,4),frandom(-4,4));
		}
		HLI1 BBBB 6 A_HLSUVBigSmoke;
		HLI1 B -1;
		Stop;
	}
	void A_HLSUVBigSmoke()
	{
		bool num;
		actor smoke;
		[num,smoke]=A_SpawnItemEx("NewExploMediumSmoke",frandom(-64,64),frandom(-48,48),frandom(32,64),0,0,frandom(1,4));
		smoke.A_SetScale(.83);
	}
}

class SUVGlass : ModelBase
{
	Default
	{
		Renderstyle "Translucent";
		Alpha .5;
		Radius 16;
		Height 56;
		+DONTTHRUST
		-SOLID
		+NOTARGET
		+NOBLOOD
		+SHOOTABLE
	}
	States
	{
	Death:
		HLI1 BCDEFGHI 1;
		HLI1 JKLM 1 A_FadeOut;
		Stop;
	}
}

//MTM 8 Loader
class Loader : ModelBase
{
	bool nobox;
	actor box, lclaw, rclaw;
	override void postbeginplay()
	{
		bool num;
		if(nobox)
		{
			[num,lclaw]=A_SpawnItemEx("LoaderClaw",96,-32,32,flags:SXF_SETMASTER,tid:tid);
			[num,rclaw]=A_SpawnItemEx("LoaderClaw",96,32,32,flags:SXF_SETMASTER,tid:tid);
		}
		else
			[num,box]=A_SpawnItemEx("LoaderBox",112,0,32,flags:SXF_SETMASTER,tid:tid);
		HLModelSetup();
		super.postbeginplay();
	}
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'loader_body_000.png',
			'loader_body_001.png',
			'loader_body_002.png',
			'loader_body_003.png',
			'loader_body_004.png',
			'loader_body_005.png',
			'loader_body_006.png',
			'loader_body_007.png',
			'loader_body_008.png',
			'loader_body_009.png',
			'loader_body_010.png',
			'loader_body_011.png',
			'loader_body_012.png',
			'loader_body_013.png',
			'loader_body_014.png',
			'loader_body_015.png',
			'loader_body_016.png',
			'loader_body_017.png',
			'loader_body_018.png',
			'loader_body_019.png',
			'loader_body_020.png',
			'loader_body_021.png'
		};
		static const name modelskin2[]=
		{
			'loader_body_009.png',
			'loader_legs_001.png',
			'loader_legs_002.png',
			'loader_legs_003.png',
			'loader_body_011.png',
			'loader_body_015.png',
			'loader_legs_006.png',
			'loader_body_009.png',
			'loader_legs_001.png',
			'loader_legs_002.png',
			'loader_legs_003.png',
			'loader_body_011.png',
			'loader_body_015.png',
			'loader_legs_006.png'
		};

		int mod1max = 21;
		if(nobox)
			mod1max = 19;

		for(int i = 0; i <= mod1max; i++)
			A_ChangeModel("Loader", 0, "Models", "loader_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);

		for(int i = 0; i <= 13; i++)
		{
			A_ChangeModel("Loader", 1, "Models", "loader_leftlegs.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("Loader", 2, "Models", "loader_rightlegs.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
		}
	}
	override void tick()
	{
		if(box)
			box.A_Warp(AAPTR_MASTER,112,0,32);
		if(lclaw)
			lclaw.A_Warp(AAPTR_MASTER,96,-32,32);
		if(rclaw)
			rclaw.A_Warp(AAPTR_MASTER,96,32,32);
		super.tick();
	}
	Default
	{
		Radius 64;
		Height 96;
		+DONTTHRUST
		Scale .6;
		//+DECOUPLEDANIMATIONS
	}
	States
	{
	//Spawn:
		//HLI1 A -1 NODELAY SetAnimation('idle', 30, flags: SAF_LOOP|SAF_NOOVERRIDE);
		//Stop;
	Spawn:
		HLI1 A -1;
		//HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		//HLI2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		//HLI3 ABC 1;
		Loop;
	//See:
		//HLI1 A -1 SetAnimation('boxwalk', 24, flags: SAF_LOOP|SAF_NOOVERRIDE);
		//Stop;
	See:
		HLW1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLW2 ABCDEFGHIJKLMNOPQRST 1;
		Loop;
	}
}

class LoaderNoBox : Loader
{
	override void postbeginplay()
	{
		nobox=1;
		super.postbeginplay();
	}
}

class LoaderBox : Actor
{
	Default
	{
		Radius 32;
		Height 64;
		+SOLID
		+NOGRAVITY
		+NOLIFTDROP
		+ACTLIKEBRIDGE
	}
}
class LoaderClaw : LoaderBox
{
	Default
	{
		Radius 16;
		Height 32;
	}
}

//Bulldozer
class Bulldozer1 : ModelBase
{
	override void postbeginplay()
	{
		A_SpawnItemEx("BulldozerRoof",-8,0,88);
		A_SpawnItemEx("BulldozerFront",80,-32);
		A_SpawnItemEx("BulldozerFront",80,-16);
		A_SpawnItemEx("BulldozerFront",80,16);
		A_SpawnItemEx("BulldozerFront",80,32);
		A_SpawnItemEx("BulldozerFront",48,-16);
		A_SpawnItemEx("BulldozerFront",48,16);
		A_SpawnItemEx("BulldozerFront",-48,-16);
		A_SpawnItemEx("BulldozerFront",-48,16);
		A_SpawnItemEx("BulldozerSide",-48,-32);
		A_SpawnItemEx("BulldozerSide",-16,-32);
		A_SpawnItemEx("BulldozerSide",16,-32);
		A_SpawnItemEx("BulldozerSide",48,-32);
		A_SpawnItemEx("BulldozerSide",-48,32);
		A_SpawnItemEx("BulldozerSide",-16,32);
		A_SpawnItemEx("BulldozerSide",16,32);
		A_SpawnItemEx("BulldozerSide",48,32);
		A_SpawnItemEx("BulldozerRear",-32,0);
		A_SpawnItemEx("BulldozerPillar",-48,-32);
		A_SpawnItemEx("BulldozerPillar",-48,32);
		super.postbeginplay();
	}
	Default
		{Height 36;}
}
class BulldozerRoof : LoaderBox
{
	Default
	{
		Radius 36;
		Height 2;
	}
}
class BulldozerFront : LoaderBox
{
	Default
	{
		Radius 16;
		Height 40;
	}
}
class BulldozerSide : LoaderBox
{
	Default
	{
		Radius 16;
		Height 24;
	}
}
class BulldozerRear : LoaderBox
{
	Default
	{
		Radius 8;
		Height 64;
	}
}
class BulldozerPillar : LoaderBox
{
	Default
	{
		Radius 2;
		Height 64;
	}
}

//Tram
class Tram : ModelBase
{
	Default
	{
		Radius 40;
		Height 32;
		+DONTTHRUST
	}
}

class TramBellmer : Tram
{
	static const name modelskin1[]=
	{
		'scientist_body_000.png',
		'scientist_body_001.png',
		'scientist_body_002.png',
		'scientist_body_003.png',
		'scientist_body_004.png'
	};
	static const name modelskin2[]=
	{
		'scientist_head3_000.png',
		'scientist_head1_001.png',
		'scientist_head3_002.png'
	};
	override void HLModelSetup()
	{
		for(int i = 0; i <= 4; i++)
			A_ChangeModel("", 0, "Models", "scientist_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		for(int i = 0; i <= 2; i++)
			A_ChangeModel("", 1, "Models", "scientist_head3.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
	}
	Default
	{
		+NOCLIP
		//+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTU 5;
		//HLI1 A -1 NODELAY SetAnimation('coffee', 7, flags: SAF_LOOP|SAF_NOOVERRIDE|SAF_INSTANT);
		Loop;
	}
}

class TramBattery : Tram
{
	Default
	{
		Scale .6;
		-SOLID
		+NOCLIP
	}
}