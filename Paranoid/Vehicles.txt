//Osprey
class Osprey : ModelBase
{
	bool BellmerOnBoard;
	//int bobstate;
	override void tick()
	{
		/*if(bNOGRAVITY && pos.z != floorz)
		{
			double newz=pos.z-BobSin(bobstate)/2.;
			bobstate=(bobstate+1)&63;
			newz+=BobSin(bobstate)/2.;
			SetZ(newz);
		}*/
		if(BellmerOnBoard && rider[0] == null)
		{
			ridermax = 1;
			riderpos[0] = (44, -8, 36);
			riderangle[0] = 90;
			rider[0] = BuildRider("OspreyBellmer", riderpos[0], riderangle[0]);
		}
		super.tick();
	}
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'osprey_000.png',
			'osprey_001.png',
			'osprey_002.png',
			'osprey_003.png',
			'osprey_004.png',
			'osprey_005.png',
			'osprey_006.png'
		};
		for(int i = 0; i <= 6; i++)
			A_ChangeModel("", 0, "Models", "osprey.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		SetModelFlag(MDL_USEACTORPITCH);
	}
	override void OnDestroy()
	{
		A_RemoveChildren(1, RMVF_EVERYTHING);
		super.OnDestroy();
	}
	Default
	{
		Radius 3;
		Height 56;
		+DONTTHRUST
		+NOCLIP
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTARGET
		+SHOOTABLE
		+NONSHOOTABLE
		+NOBLOOD
		+NOTRIGGER
		+NOTELEPORT
		+ISMONSTER
		+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 A -1 NODELAY
		{
			SetAnimation('rotor', 17, flags: SAF_LOOP|SAF_NOOVERRIDE);
			A_StartSound("play/osprey", flags: CHANF_LOOPING );
		}
		Stop;
	Land:
		HLI1 A -1 SetAnimation('on_tarmac', 15, flags: SAF_LOOP|SAF_NOOVERRIDE);
		Stop;
	Death:
		HLI1 A 0
		{
			static const name modelskin2[]=
			{
				'dead_osprey_000.png',
				'dead_osprey_001.png',
				'dead_osprey_002.png',
				'dead_osprey_003.png',
				'dead_osprey_004.png',
				'nochrome.png',	//'dead_osprey_005.png',
				'dead_osprey_006.png',
				'dead_osprey_007.png',
				'dead_osprey_008.png',
				'dead_osprey_009.png',
				'nochrome.png',	//'dead_osprey_010.png',
				'nochrome.png',	//'dead_osprey_011.png',
				'nochrome.png',	//'dead_osprey_012.png',
				'nochrome.png'	//'dead_osprey_013.png'
			};
			for(int i = 0; i <= 13; i++)
				A_ChangeModel("OspreyDead", 0, "Models", "dead_osprey.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN);

			SetAnimation('fly', 45, flags: SAF_LOOP|SAF_NOOVERRIDE);
			A_LowGravity();
			A_Quake(9,16,0,1024);
			A_StopSound();
		}
	DeathLoop:
		HLI1 A 1
		{
			A_HLOspreyPitch();
			for(int i=0;i<2;i++)
			{
				A_HLOspreyExplode();
				A_HLOspreyExplode(3);
			}
			A_StartSound("halflife/weapons/randomexplo", CHAN_AUTO, attenuation:ATTN_NONE);
			A_HLOspreyBigSmoke();
		}
		HLI1 AAAA 1 A_HLOspreyPitch;
		HLI1 A 1
		{
			A_HLOspreyPitch();
			for(int i=0;i<2;i++)
			{
				A_HLOspreyExplode();
				A_HLOspreyExplode(3);
			}
			A_HLOspreyBigSmoke();
		}
		HLI1 AAAAA 1 A_HLOspreyPitch;
		Loop;
	Crash:
		HLI1 A 1
		{
			SetAnimation('crash', 30, endFrame:44);
			pitch=0;
			A_StartSound("halflife/weapons/randomexplo", CHAN_AUTO, attenuation:ATTN_NONE);
			A_Quake(9,40,0,1024);
			A_StartSound("Osprey/Crash", CHAN_AUTO, attenuation:ATTN_NONE);
		}
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 0 A_HLOspreySpark;
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 0 A_HLOspreySpark;
		HLI1 AAA 1 A_HLOspreyExplode;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
		HLI1 AA 1 A_HLOspreySpark;
		HLI1 A 1 A_HLOspreyBigSmoke;
	CrashLoop:
		HLI1 AAAAAAAAAAAA 9 A_HLOspreyBigSmoke;
		HLI1 A -1;
		Stop;
	}
	void A_HLOspreyPitch()
	{
		if(pitch<=22.5)
			pitch+=0.25;
	}
	void A_HLOspreySpark()
	{
		for(int i=0;i<8;i++)
			A_SpawnItemEx("Spark_O1",frandom(-96,96),frandom(-96,96),frandom(32,96),frandom(-4,4),frandom(-4,4),frandom(-4,4));
	}
	void A_HLOspreyExplode(double scalar=1.0)
	{
		bool num;
		actor boom;
		[num,boom]=A_SpawnItemEx("ParanoidExplosion",frandom(-96,96),frandom(-96,96),frandom(0,96));
		boom.A_SetScale(scalar);
	}
	void A_HLOspreyBigSmoke()
	{
		bool num;
		actor smoke;
		[num,smoke]=A_SpawnItemEx("NewExploMediumSmoke",frandom(-96,96),frandom(-96,96),frandom(0,96),0,0,frandom(5,8));
		smoke.A_SetScale(.83);
	}
}

class OspreyDead : Osprey{}

class OspreyBellmer : ModelBase
{
	/*int bobstate;
	override void tick()
	{
		if(pos.z!=floorz)
		{
			double newz=pos.z-BobSin(bobstate)/2.;
			bobstate=(bobstate+1)&63;
			newz+=BobSin(bobstate)/2.;
			SetZ(newz);
		}
		super.tick();
	}*/
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'w_suit_002.png',
			'w_suit_000.png',
			'w_suit_001.png',
			'w_suit_003.png',
			'w_suit_005.png',
			'w_suit_007.png',
			'w_suit_004.png',
			'w_suit_006.png',
			'w_suit_002.png',
			'w_suit_002.png',
			'w_suit_002.png'
		};
		static const name modelskin2[]=
		{
			'scientist_head3_000.png',
			'scientist_head1_001.png',
			'w_suit_002.png'
		};
		for(int i = 0; i <= 10; i++)
			A_ChangeModel("RolfBellmer", 0, "Models", "hev_scientist_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		for(int i = 0; i <= 2; i++)
			A_ChangeModel("RolfBellmer", 1, "Models", "hev_scientist_head2.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
	}
	Default
	{
		Radius 3;
		Height 56;
		+DONTTHRUST
		+NOCLIP
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTARGET
		+SHOOTABLE
		+NONSHOOTABLE
		+NOBLOOD
		+NOTRIGGER
		+NOTELEPORT
		+ISMONSTER
		//+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 2;
		HLI2 AB 2;
		Loop;
	/*Spawn:
		HLI1 A -1 NODELAY SetAnimation('idle1', 30, flags: SAF_LOOP|SAF_NOOVERRIDE);
		Stop;*/
	}
}

//SUV
class SUV : ModelBase
{
	override void HLModelSetup()
	{
		static const name modelskin[]=
		{
			'suv_000.png',
			'suv_001.png',
			'suv_002.png',
			'suv_003.png',
			'suv_004.png',
			'suv_005.png',
			'suv_006.png',
			'suv_007.png',
			'suv_008.png',
			'suv_009.png',
			'suv_010.png',
			'suv_011.png',
			'suv_012.png',
			'suv_013.png',
			'suv_014.png',
			'suv_015.png'
		};
		for(int i = 0; i <= 15; i++)
			A_ChangeModel("ModelBase", 0, "Models", "suv.md3", i, "Models", modelskin[i], CMDL_USESURFACESKIN);
	}
	override void BlockingSetup()
	{
		blockmax = 4;
		blockpos[0] = (60, 18, 4);
		blockpos[1] = (60, -18, 4);
		blockpos[2] = (-60, 18, 4);
		blockpos[3] = (-60, -18, 4);
		blocksize[0] = (20, 38);
		blocksize[1] = (20, 38);
		blocksize[2] = (20, 62);
		blocksize[3] = (20, 62);

		ridermax = 1;
		riderpos[0] = (0, 0, 2);
		rider[0] = BuildRider("SUVGlass", riderpos[0]);
	}
	Default
	{
		Radius 38;
		Height 66;
		+DONTTHRUST
		DeathHeight 66;
		Health 400;
		PainChance 256;
		+ISMONSTER
		+SHOOTABLE
		+NOBLOOD
		+FRIENDLY
	}
	States
	{
	Pain:
		HLI1 A -1 A_StartSound("SUV/Hit", CHAN_AUTO);
		Stop;
	Death:
		HLI1 A 8
		{
			static const name modelskin[]=
			{
				'suv2_000.png',
				'suv2_001.png',
				'suv2_002.png',
				'suv2_003.png',
				'suv2_004.png',
				'suv2_005.png',
				'suv_006.png',
				'suv2_007.png',
				'suv_015.png',
				'suv2_009.png',
				'suv_008.png',
				'suv_009.png',
				'suv2_012.png',
				'suv_011.png',
				'suv2_014.png',
				'suv2_015.png'
			};
			for(int i = 0; i <= 15; i++)
				A_ChangeModel("ModelBase", 0, "Models", "suv2.md3", i, "Models", modelskin[i], CMDL_USESURFACESKIN);

			A_RemoveChildren(true, RMVF_EVERYTHING);
			A_Explode(128,192);
			A_StartSound("SUV/Explode");
			A_SpawnItemEx("ParanoidExplosion",56,32,40);
			A_SpawnItemEx("ParanoidExplosion",-64,-40,56);
			A_SpawnItemEx("ParanoidExplosion",frandom(-16,16),-40,32);
			A_SpawnItemEx("ParanoidExplosion",frandom(-16,16),40,32);
			for(int i=0;i<16;i++)
				A_SpawnItemEx("Spark_O1",frandom(-96,96),frandom(-96,96),frandom(32,96),frandom(-4,4),frandom(-4,4),frandom(-4,4));
		}
		HLI1 AAAA 6 A_HLSUVBigSmoke;
		HLI1 A -1;
		Stop;
	}
	void A_HLSUVBigSmoke()
	{
		bool num;
		actor smoke;
		[num,smoke]=A_SpawnItemEx("NewExploMediumSmoke",frandom(-64,64),frandom(-48,48),frandom(32,64),0,0,frandom(1,4));
		smoke.A_SetScale(.83);
	}
}

class SUVGlass : ModelBase
{
	override void HLModelSetup()
		{A_ChangeModel("ModelBase", 0, "Models", "suv_glass.iqm", 0, "Models", "suv_glass.png");}
	Default
	{
		Renderstyle "Translucent";
		Alpha .5;
		Radius 16;
		Height 56;
		+DONTTHRUST
		-SOLID
	}
}

//MTM 8 Loader
class Loader : ModelBase
{
	bool nobox;
	override void BlockingSetup()
	{
		blockmax = 1;
		blockpos[0] = (112, 0, 32);
		blocksize[0] = (32, 64);
	}
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'loader_body_000.png',
			'loader_body_001.png',
			'loader_body_002.png',
			'loader_body_003.png',
			'loader_body_004.png',
			'loader_body_005.png',
			'loader_body_006.png',
			'loader_body_007.png',
			'loader_body_008.png',
			'loader_body_009.png',
			'loader_body_010.png',
			'loader_body_011.png',
			'loader_body_012.png',
			'loader_body_013.png',
			'loader_body_014.png',
			'loader_body_015.png',
			'loader_body_016.png',
			'loader_body_017.png',
			'loader_body_018.png',
			'loader_body_019.png',
			'loader_body_020.png',
			'loader_body_021.png'
		};
		static const name modelskin2[]=
		{
			'loader_body_009.png',
			'loader_legs_001.png',
			'loader_legs_002.png',
			'loader_legs_003.png',
			'loader_body_011.png',
			'loader_body_015.png',
			'loader_legs_006.png',
			'loader_body_009.png',
			'loader_legs_001.png',
			'loader_legs_002.png',
			'loader_legs_003.png',
			'loader_body_011.png',
			'loader_body_015.png',
			'loader_legs_006.png'
		};

		for(int i = 0; i <= 21; i++)
			A_ChangeModel("Loader", 0, "Models", "loader_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		if(nobox)
		{
			for(int i = 20; i <= 21; i++)
				A_ChangeModel("Loader", 0, "Models", "loader_body.iqm", i, "Models", 'nochrome.png', CMDL_USESURFACESKIN);
		}
		for(int i = 0; i <= 13; i++)
		{
			A_ChangeModel("Loader", 1, "Models", "loader_leftlegs.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
			A_ChangeModel("Loader", 2, "Models", "loader_rightlegs.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
		}
	}
	Default
	{
		Radius 64;
		Height 96;
		+DONTTHRUST
		Scale .6;
		//+DECOUPLEDANIMATIONS
	}
	States
	{
	//Spawn:
		//HLI1 A -1 NODELAY SetAnimation('idle', 30, flags: SAF_LOOP|SAF_NOOVERRIDE);
		//Stop;
	Spawn:
		HLI1 A -1;
		//HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		//HLI2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		//HLI3 ABC 1;
		Loop;
	//See:
		//HLI1 A -1 SetAnimation('boxwalk', 24, flags: SAF_LOOP|SAF_NOOVERRIDE);
		//Stop;
	See:
		HLW1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLW2 ABCDEFGHIJKLMNOPQRST 1;
		Loop;
	}
}

class LoaderNoBox : Loader
{
	override void BeginPlay()
	{
		nobox=1;
		super.BeginPlay();
	}
	override void BlockingSetup()
	{
		blockmax = 2;
		blockpos[0] = (96, -32, 32);
		blockpos[1] = (96, 32, 32);
		blocksize[0] = (16, 32);
		blocksize[1] = (16, 32);
	}
}

//Tram
class TramIntro : ModelBase
{
	actor Tram, Barney, Bellmer, Battery;
	override void BlockingSetup()
	{
		ridermax = 4;
		riderpos[1] = (-56, 0, 24);
		riderpos[2] = (-32, 0, 22);
		riderpos[3] = (-4, -1, 50);
		rider[0] = BuildRider("Tram");
		rider[1] = BuildRider("HLBarney", riderpos[1]);
		rider[1].SetStateLabel("Guard");
		rider[2] = BuildRider("TramBellmer", riderpos[2]);
		rider[3] = BuildRider("HEVBattery", riderpos[3]);
		rider[3].Scale = (.5, .5);
	}
	Default
	{
		-SOLID
		+NOCLIP
		+NOGRAVITY
	}
}

class Tram : ModelBase
{
	override void BlockingSetup()
	{
		blockmax = 20;
		blockpos[0] = (48, 16, 0);
		blockpos[1] = (48, -16, 0);
		blockpos[2] = (-48, 16, 0);
		blockpos[3] = (-48, -16, 0);
		blockpos[4] = (24, 0, 0);
		blockpos[5] = (24, 24, 0);
		blockpos[6] = (24, -24, 0);
		blockpos[7] = (-24, 0, 0);
		blockpos[8] = (-24, 24, 0);
		blockpos[9] = (-24, -24, 0);
		blockpos[10] = (76, 0, 0);
		blockpos[11] = (76, 16, 0);
		blockpos[12] = (76, -16, 0);
		blockpos[13] = (-76, 0, 0);
		blockpos[14] = (-76, 16, 0);
		blockpos[15] = (-76, -16, 0);
		blockpos[16] = (76, 32, 0);
		blockpos[17] = (76, -32, 0);
		blockpos[18] = (-76, 32, 0);
		blockpos[19] = (-76, -32, 0);
		blocksize[0] = (20, 32);
		blocksize[1] = (20, 32);
		blocksize[2] = (20, 32);
		blocksize[3] = (20, 32);
		blocksize[4] = (1, 64);
		blocksize[5] = (1, 64);
		blocksize[6] = (1, 64);
		blocksize[7] = (1, 64);
		blocksize[8] = (1, 64);
		blocksize[9] = (1, 64);
		blocksize[10] = (2, 56);
		blocksize[11] = (2, 56);
		blocksize[12] = (2, 56);
		blocksize[13] = (2, 56);
		blocksize[14] = (2, 56);
		blocksize[15] = (2, 56);
		blocksize[16] = (1, 56);
		blocksize[17] = (1, 56);
		blocksize[18] = (1, 56);
		blocksize[19] = (1, 56);
	}
	static const name modelskin[]=
	{
		'tram.jpg',
		'tram.jpg',
		'tram.jpg',
		'tram_supports.jpg',
		'tram_panel01.jpg',
		'tram_panel02.jpg'
	};
	override void HLModelSetup()
	{
		for(int i = 0; i <= 5; i++)
			A_ChangeModel("", 0, "Models", "tram.md3", i, "Models", modelskin[i], CMDL_USESURFACESKIN);
	}
	Default
	{
		Scale .8;
		Radius 40;
		Height 32;
	}
}

class TramBellmer : ModelBase
{
	static const name modelskin1[]=
	{
		'scientist_body_000.png',
		'scientist_body_001.png',
		'scientist_body_002.png',
		'scientist_body_003.png',
		'scientist_body_004.png'
	};
	static const name modelskin2[]=
	{
		'scientist_head3_000.png',
		'scientist_head1_001.png',
		'scientist_head3_002.png'
	};
	override void HLModelSetup()
	{
		for(int i = 0; i <= 4; i++)
			A_ChangeModel("", 0, "Models", "scientist_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);
		for(int i = 0; i <= 2; i++)
			A_ChangeModel("", 1, "Models", "scientist_head3.iqm", i, "Models", modelskin2[i], CMDL_USESURFACESKIN, 0);
	}
	Default
	{
		Radius 40;
		Height 32;
		-SOLID
		+NOCLIP
		//+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTU 5;
		//HLI1 A -1 NODELAY SetAnimation('coffee', 7, flags: SAF_LOOP|SAF_NOOVERRIDE|SAF_INSTANT);
		Loop;
	}
}