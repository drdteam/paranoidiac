//===================
// Government Troops
//===================

class HLGruntAny : RandomSpawner
{
	Default
	{
		DropItem "HLGruntM16";
		DropItem "HLGruntShotgun";
	}
}

class HLGruntNoGrenadesAny : RandomSpawner
{
	Default
	{
		DropItem "HLGruntM16NoGrenades";
		DropItem "HLGruntShotgunNoGrenades";
	}
}

//==========================================
// Government Troops: M16 & Grenade Attack
//==========================================
class HLGruntM16 : HLMonster
{
	bool closegrencheck,shotgun,nohandgren;
	int GrenTimeCounter;
	override void HLModelSetup()
	{
		static const name modelskin1[]=
		{
			'hgrunt_body_000.png',
			'hgrunt_body_001.png',
			'hgrunt_body_002.png',
			'hgrunt_body_003.png',
			'hgrunt_body_004.png'
		};
		static const name modelskin2a[]=
		{
			'hgrunt_head1_000.png',
			'hgrunt_head1_001.png',
			'hgrunt_head1_002.png',
			'hgrunt_head1_003.png'
		};
		static const name modelskin2b[]=
		{
			'hgrunt_head2_000.png',
			'hgrunt_head2_001.png'
		};
		static const name modelskin2c[]=
		{
			'hgrunt_head3_000.png',
			'hgrunt_head3_001.png'
		};

		for(int i = 0; i <= 4; i++)
			A_ChangeModel("HLGruntM16", 0, "Models", "hgrunt_body.iqm", i, "Models", modelskin1[i], CMDL_USESURFACESKIN);

		switch(random(1, 3))
		{
		case 1:
			for(int i = 0; i <= 3; i++)
				A_ChangeModel("HLGruntM16", 1, "Models", "hgrunt_head1.iqm", i, "Models", modelskin2a[i], CMDL_USESURFACESKIN, 0);
			break;
		case 2:
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("HLGruntM16", 1, "Models", "hgrunt_head2.iqm", i, "Models", modelskin2b[i], CMDL_USESURFACESKIN, 0);
			break;
		case 3:
			for(int i = 0; i <= 1; i++)
				A_ChangeModel("HLGruntM16", 1, "Models", "hgrunt_head3.iqm", i, "Models", modelskin2c[i], CMDL_USESURFACESKIN, 0);
			break;
		}

		if(shotgun)
			A_ChangeModel("HLGruntM16", 2, "Models", "hgrunt_shotgun.iqm", 2, "Models", "hgrunt_shotgun.png", 0, 0);
		else
			A_ChangeModel("HLGruntM16", 2, "Models", "hgrunt_arifle.iqm", 2, "Models", "hgrunt_arifle.png", 0, 0);
	}
	Default
	{
		Health 150;
		Speed 3.5;
		Height 63;
		maxdropoffheight 128;
		SeeSound "halflife/monsters/humangrunt/sight";
		PainSound "halflife/monsters/humangrunt/pain";
		DeathSound "halflife/monsters/humangrunt/death";
		ActiveSound "halflife/monsters/humangrunt/active";
		Mass 200;
		PainChance 64;
		PainChance "Crowbar",210;
		Species "HECU";
		HLMonster.WalkTic 2;
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJK 2 A_Look;
		Loop;
	See:
		HLR1 A 0
		{
			if(closegrencheck)
			{
				bFRIGHTENED=1;
				if(GrenTimeCounter>=4)
				{
					closegrencheck=0;
					GrenTimeCounter-=4;
					bFRIGHTENED=0;
				}
				else
				{
					GrenTimeCounter++;
					return ResolveState("Flee");
				}
			}
			if(CheckIfCloser(target,300))
				return ResolveState("Walking");
			A_SetSpeed(3.5);
			return state(null);
		}
		HLR1 ABCDEFGHIJKLMNOPQRSTUVWX 1 A_HLChase;
		Loop;
	Walking:
		HLW1 A 0
		{
			MissileChanceMult = 0.0625;
			A_SetSpeed(1.75);
		}
		HLW1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_HLChase(4);
		HLW2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_HLChase(4);
		HLW3 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ 1 A_HLChase(4);
		HLW3 \ 0 A_KeepWalking;
		Goto See;
	Flee:
		HLR1 A 0 A_SetSpeed(3.5);
		HLR1 A 1 A_Chase(null,null);
		HLR1 B 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 C 1 A_Chase(null,null);
		HLR1 D 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 E 1 A_Chase(null,null);
		HLR1 F 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 G 1 A_Chase(null,null);
		HLR1 H 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 I 1 A_Chase(null,null);
		HLR1 J 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 K 1 A_Chase(null,null);
		HLR1 L 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 M 1 A_Chase(null,null);
		HLR1 N 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 O 1 A_Chase(null,null);
		HLR1 P 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 Q 1 A_Chase(null,null);
		HLR1 R 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 S 1 A_Chase(null,null);
		HLR1 T 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 U 1 A_Chase(null,null);
		HLR1 V 1 A_Chase(null,null,HLSMOOTHCHASE);
		HLR1 W 1 A_Chase(null,null);
		HLR1 XY 1 A_Chase(null,null,HLSMOOTHCHASE);
		Goto See;
	Melee:
		HLA1 A 1
		{
			if(nohandgren||random(0,255)>96)
				return resolvestate("Missile");
			return state(null);
		}
		HLA1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_FaceTarget;
		HLA2 ABCDE 1 A_FaceTarget;
		HLA2 F 1
		{
			actor gren=A_SpawnProjectile("HLGruntHandGrenade",40);
			if(CheckMeleeRange())
			{
				closegrencheck=1;
				if(gren!=null)
					gren.A_ScaleVelocity(.5);
			}
		}
		HLA2 GHIJKLMNOPQRSTUVWXYZ[ 1;
		Goto See;
	Missile:
		HLA3 K 1
		{
			if(shotgun)
			{
				if(random(0,255)<200)
					return resolvestate("Shotgun");
				if(!nohandgren&&CheckIfCloser(target,600)&&!CheckIfCloser(target,256))
					return resolvestate("Melee");
				return resolvestate("Shotgun");
			}
			else
			{
				if(random(0,255)<200)
					return resolvestate("Assault");
				if(CheckIfCloser(target,600))
				{
					if(!CheckIfCloser(target,256))
					{
						if(random(0,255)<64)
							return resolvestate("GrenadeGun");
						if(!nohandgren)
							return resolvestate("Melee");
					}
					return resolvestate("Assault");
				}
				if(CheckIfCloser(target,1000))
					return resolvestate("GrenadeGun");
				return resolvestate("Assault");
			}
			return state(null);
		}
		Wait;
	Assault:
		HLA3 KKKK 3 A_FaceTarget;
		HLA3 K 0 A_FaceTarget;
		HLA2 \ 1 Light("ImShootingAGun") A_GruntGunshot(1);
		HLA2 ] 1;
		HLA3 AB 1;
		HLA3 B 0 A_Jump(15,"See");
		HLA3 B 0 A_MonsterRefire(40,"See");
		Goto Assault+4;
	Shotgun:
		HLA3 KKKK 3 A_FaceTarget;
		HLA3 K 0 A_Jump(64,"ShotgunDouble");
		HLA3 KKK 4 A_FaceTarget;
		HLA2 \ 1 Light("ImShootingAGun") A_GruntGunshot(5);
		HLA2 ] 1;
		HLA3 K 16;
		HLA3 K 0 A_Jump(40,"See");
		HLA3 K 0 A_MonsterRefire(40,"See");
		Goto Shotgun+2;
	ShotgunDouble:
		HLA3 KKKKK 4 A_FaceTarget;
		HLA2 \ 1 Light("ImShootingAGun") A_GruntGunshot(10);
		HLA2 ] 1;
		HLA3 K 16;
		HLA3 KKK 4 A_FaceTarget;
		HLA3 K 0 A_Jump(100,"See");
		HLA3 K 0 A_MonsterRefire(40,"See");
		Loop;
	GrenadeGun:
		HLA3 LMNOPQRSTUVWXYZ[\] 1 A_FaceTarget;
		HLA4 ABCDEFGHIJ 1 A_FaceTarget;
		HLA4 K 1 Light("ImShootingAGun")
		{
			A_StartSound("halflife/weapons/grenadelaunch", CHAN_5);
			A_GruntGunsmoke();
			actor gren=A_SpawnProjectile("M16Grenade",38);
			if(gren!=null)
			{
				if(CheckIfCloser(target,500))
					gren.vel.z+=1.25;
				else
					gren.vel.z+=3.5;
			}
		}
		HLA4 LMNOPQRSTUVWXYZ[ 1;
		Goto See;
	Pain:
		HLP1 A 1
		{
			A_Pain();
			if(closegrencheck)
				GrenTimeCounter++;
		}
		HLP1 BCDEFGH 1;
		Goto See;
	Death:
		HLD1 A 1
		{
			A_ChangeModel("HLGruntM16", 2, flags:CMDL_HIDEMODEL);
			A_Scream();
			if(shotgun)
				A_DropItem("HLShotgun");
			else
				A_DropItem("HLAssaultRifle");
			bSolid=0;
		}
		HLD1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLD2 A 1 A_StartSound("halflife/weapons/bodydrop");
		HLD2 BCDEF 1;
		HLD2 G -1;
		Stop;
	XDeath:
	Crush:
		TNT1 A 0 A_HLGibs;
		Stop;
	}
	state A_KeepWalking()
	{
		if(!CheckIfCloser(target,300))
		{
			MissileChanceMult = 1.0;
			return ResolveState("See");
		}
		return state(null);
	}
	virtual void A_GruntGunshot(int shots)
	{
		A_GruntGunsmoke();
		if(shots==1)
			A_StartSound("halflife/weapons/machinegunshot", CHAN_5);
		else if(shots==5)
			A_StartSound("halflife/weapons/shotgunsingle", CHAN_5);
		else if(shots==10)
			A_StartSound("halflife/weapons/shotgundouble", CHAN_5);
		A_CustomBulletAttack(7,7,shots,4,"NewPuff1");
	}
	void A_GruntGunsmoke()
	{
		for(int i=0;i<2;i++)
			A_SpawnItemEx("GunSmoke",35,3,49*ModelHeightMul);
	}
}

class HLGruntM16NoGrenades : HLGruntM16
{
	override void PostBeginPlay()
	{
		nohandgren=1;
		super.PostBeginPlay();
	}
}

class HLGruntShotgun : HLGruntM16
{
	override void PostBeginPlay()
	{
		shotgun=1;
		super.PostBeginPlay();
	}
}

class HLGruntShotgunNoGrenades : HLGruntShotgun
{
	override void PostBeginPlay()
	{
		nohandgren=1;
		super.PostBeginPlay();
	}
}

//********************************************
class HLGruntHandGrenade : Actor
{
	int count;
	override void tick()
	{
		count++;
		if(count>=105)
			SetStateLabel("Explode");
		super.tick();
	}
	Default
	{
		Mass 1;
		Radius 3;
		Height 6;
		Speed 20;
		Damage 1;
		PROJECTILE;
		BounceType "Doom";
		+CANBOUNCEWATER
		BounceFactor .6;
		-NOGRAVITY
		Gravity .5;
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 2;
		HLI2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 2;
		HLI3 ABC 2;
		Loop;
	Death:
		HLD1 A -1;
		Stop;
	Explode:
		TNT1 A 1
		{
			A_Explode();
			A_SpawnItemEx("ParanoidExplosion");
		}
		Stop;
	}
}

//********************************************
class HLGruntDead : HLGruntM16
{
	Default
	{
		-SHOOTABLE
		-COUNTKILL
		-SOLID
		-ISMONSTER
	}
	States
	{
	Spawn:
		TNT1 A 0;
		HLD2 G -1 A_ChangeModel("HLGruntM16", 2, flags:CMDL_HIDEMODEL);
		Stop;
	}
}