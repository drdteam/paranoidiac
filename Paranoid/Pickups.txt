//==================
// Charging Stations
//==================

class FirstAidStation : Actor
{
	bool inuse;
	override bool Used(Actor user)
	{
		user.A_StopSound(CHAN_VOICE);
		if(inuse)
		{
			inuse=0;
			A_StopSound(CHAN_BODY);
			SetStateLabel("Spawn");
			return false;
		}
		if(user.Health>=100||CheckRange(radius+30,0))
			return false;
		if(!Health)
		{
			A_StartSound("MEDCHARGEUSED");
			SetStateLabel("Death");
			return false;
		}
		inuse=1;
		target=user;
		SetStateLabel("Working");
		return false;
	}
	Default
	{
		+SOLID
		+NOGRAVITY
		Height 48;
		Radius 16;
		Health 40;
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	Working:
		HLI1 A 5 A_HLChargingStation;
		Loop;
	Death:
		HLI1 B -1;
		Stop;
	}
	virtual void A_HLChargingStation()
	{
		A_StartSound("MEDCHARGE", flags:CHANF_LOOPING);
		target.GiveInventory("Health",1);
		Health--;
		if(!Health)
		{
			inuse=0;
			A_StartSound("MEDCHARGEUSED");
			SetStateLabel("Death");
		}
		if(target.Health>=100||CheckRange(radius+30,0))
		{
			inuse=0;
			A_StopSound(CHAN_BODY);
			SetStateLabel("Spawn");
		}
	}
}

class HEVChargingStation : FirstAidStation
{
	override bool Used(Actor user)
	{
		user.A_StopSound(CHAN_VOICE);
		if(inuse)
		{
			inuse=0;
			A_StopSound(CHAN_BODY);
			SetStateLabel("Spawn");
			return false;
		}
		if(user.CountInv("BasicArmor")>=100||CheckRange(radius+30,0))
			return false;
		if(!Health)
		{
			A_StartSound("HEVCHARGEUSED");
			SetStateLabel("Death");
			return false;
		}
		inuse=1;
		target=user;
		SetStateLabel("Working");
		return false;
	}
	Default
	{
		Health 50;
	}
	override void A_HLChargingStation()
	{
		A_StartSound("HEVCHARGE", flags:CHANF_LOOPING);
		target.GiveInventory("HEVCharge",1);
		Health--;
		if(!Health)
		{
			inuse=0;
			A_StartSound("HEVCHARGEUSED");
			SetStateLabel("Death");
		}
		if(target.CountInv("BasicArmor")>=100||CheckRange(radius+30,0))
		{
			inuse=0;
			A_StopSound(CHAN_BODY);
			SetStateLabel("Spawn");
		}
	}
}
class HEVCharge : BasicArmorBonus
{
	Default
	{
		Armor.SaveAmount 1;
		Armor.SavePercent 50;
		Armor.MaxSaveAmount 100;
		-INVENTORY.ALWAYSPICKUP
		Inventory.Icon "i_arm2";
	}
}

//=========
// Pickups
//=========

class HEVSuit : BasicArmorPickup
{
	Override bool TryPickup(in out Actor toucher)
	{
		//Remove the Scientist disguise upon pickup
		if(super.TryPickup(toucher))
		{
			let me=RolfBellmer(toucher);
			if(me)
				me.Scientist=0;
			return 1;
		}
		return 0;
	}
	Default
	{
		Radius 16;
		Height 52;
		Inventory.PickupSound "HEVPickup";
		Inventory.PickupMessage "Acquired the HEV Suit!";
		Armor.SaveAmount 100;
		Armor.SavePercent 50;
		Inventory.Icon "i_arm2";
	}
	states
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class HEVbattery : HEVCharge
{
	Default
	{
		Radius 4;
		Height 12;
		Inventory.PickupMessage "Picked up a battery pack for the HEV Suit.";
		Armor.SaveAmount 15;
	}
	States
	{
	Spawn:
		HLI1 A -1 LIGHT("HevBattLight");
		Stop;
	}
}

class Medkit : Health
{
	Default
	{
		Radius 8;
		Height 4;
		Inventory.PickupMessage "Picked up a field medical kit.";
		Inventory.Amount 15;
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class Medkit1 : HealthPickup
{
	Default
	{
		Tag "Portable Medkit";
		+COUNTITEM
		+INVENTORY.HUBPOWER
		+INVENTORY.INVBAR
		Health 25;
		Inventory.MaxAmount 4;
		Inventory.Icon "MEDKZ0";
		Inventory.PickupMessage "Picked up a portable medkit.";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.UseSound "misc/i_pkup";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class HLFakeInventory : FakeInventory
{
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class Key1 : HLFakeInventory
{
	override void BeginPlay()
	{
		static const name modelskin[]=
		{
			'w_security.png',
			'w_security2.png'
		};
		A_ChangeModel("ModelBase", 0, "Models", "w_security.md3", 0, "Models", modelskin[random(0, 1)]);
		super.BeginPlay();
	}
	Default
	{
		Scale .5;
		Radius 4;
		Height 2;
		Inventory.PickupMessage "Picked up a security key.";
	}
}

class Gascan1 : HLFakeInventory
{
	override void BeginPlay()
	{
		A_ChangeModel("ModelBase", 0, "Models", "gascan1.md3", 0, "Models", "gascan1.jpg");
		super.BeginPlay();
	}
	Default
	{
		Radius 4;
		Height 12;
		Scale .75;
		Mass 20;
		Inventory.PickupMessage "Acquired gasoline can.";
	}
}

class Explosive : HLFakeInventory
{
	override void BeginPlay()
	{
		A_ChangeModel("ModelBase", 0, "Models", "explosive.md3", 0, "Models", "explosive.jpg");
		super.BeginPlay();
	}
	Default
	{
		Radius 4;
		Scale .75;
		Height 8;
		Mass 10;
		Inventory.PickupMessage "Acquired explosive device.";
	}
}