class ModelBase : Actor
{
	override void BeginPlay()
	{
		HLModelSetup();
		Height = Height *  ModelHeightMul;
		super.BeginPlay();
	}
	virtual void HLModelSetup(){}
	Default
	{
		+CANPASS
		+SOLID
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
	actor BuildBridge(vector3 bridgepos, vector2 bridgesize, double bridgeangle, int bridgetid, actor bridgemaster)
	{
		let thisblock = Spawn("InvisibleBridge", bridgepos);
		if(!thisblock)
			return null;
		thisblock.A_SetSize(bridgesize.x, bridgesize.y * ModelHeightMul);
		thisblock.angle = bridgeangle;
		thisblock.ChangeTid(bridgetid);
		thisblock.master = bridgemaster;
		return thisblock;
	}
	void MoveBridge(actor thisblock, vector3 bridgepos)
	{
		if(!thisblock)
			return;
		thisblock.A_Warp(AAPTR_MASTER, bridgepos.x, bridgepos.y, bridgepos.z * ModelHeightMul, 0, WARPF_NOCHECKPOSITION);
	}
}
class ModelFloat : ModelBase
	{Default{+NOGRAVITY}}

class Monitor : ModelBase
{
	Default
	{
		Radius 15;
		Height 20;
		Scale .25;
		+PUSHABLE
	}
}
class Monitor1 : Monitor{}
class Monitor2 : Monitor{}
class Monitor3 : Monitor{}

class keyboard1 : ModelBase
{
	Default
	{
		Scale .25;
		Radius 8;
		Height 2;
	}
}
class keyboard3 : keyboard1{}

class mouse3 : keyboard1
{
	Default
	{
		Radius 3;
		Height 4;
	}
}

class flatpanel1 : ModelBase
{
	Default
	{
		Scale .8;
		Radius 12;
		Height 20;
	}
}
class flatpanel2 : flatpanel1{}

class flatpanel3 : flatpanel1
{
	Default
	{
		Scale .5;
		Radius 8;
		Height 16;
	}
}
class flatpanel4 : flatpanel3{}

class flatpanel5 : ModelFloat
{
	Default
	{
		Radius 2;
		Height 32;
		Scale 1.2;
	}
}
class flatpanel6 : flatpanel5{}
class flatpanel7 : flatpanel5
{
	States
	{
	Spawn:
		HLI1 ABCD 105;
		Loop;
	}
}
class flatpanel8 : flatpanel5{}
class flatpanel9 : flatpanel5{}

class pc1 : ModelBase
{
	Default
	{
		Scale .5;
		Radius 12;
		Height 20;
	}
}
class pc3 : pc1{}

class modem : ModelBase
{
	Default
	{
		Scale .75;
		Radius 4;
		Height 6;
	}
}

class server1 : ModelBase
	{Default{Height 60;}}
class server2 : server1{}
class server3 : server1{}

//=============================================
// Non-spawnable models
// Electrical Equipment: transformers, meters
// Lights, Tesla Coil
//=============================================

class Transformer1 : ModelBase
{
	Default
	{
		Scale 2;
		Radius 24;
		Height 88;
	}
}

class Meter1 : ModelFloat
{
	Default
	{
		Radius 4;
		Height 12;
	}
}

class Meter2 : ModelFloat
{
	Default
	{
		Radius 16;
		Height 32;
	}
}

class Meter3 : ModelFloat
{
	Default
	{
		Scale 1.5;
		Radius 24;
		Height 48;
	}
}

class light2 : ModelBase
{
	Default
	{
		Radius 16;
		Height 42;
	}
	States
	{
	Spawn:
		HLI1 A -1 Bright;
		Stop;
	}
}

class light1 : light2
{
	Default
	{
		Scale .7;
		Radius 6;
		Height 8;
		+NOGRAVITY
	}
}

class Tesla : ModelBase
{
	Default
	{
		Radius 16;
		Height 72;
	}
}

//====================================================================
// Non-spawnable models (some of which require 3D sectors)
// Heavy Equipment: Fork lifts, backhoe, trailers, generators,
// steel girders
//====================================================================

class Forklift1 : ModelBase
{
	Default
	{
		Scale 1.2;
		Height 64;
	}
}

class Forklift2 : ModelBase
{
	Default
	{
		Radius 24;
		Height 32;
	}
}

class Backhoe1 : Forklift1
	{Default{Scale 1.6;}}
class Trailer1 : Forklift1
	{Default{Scale 6;}}
class Trailer2 : Trailer1{}

class Generator1 : ModelBase
{
	Default
	{
		Scale 3;
		Radius 24;
		Height 64;
	}
}

class Generator2 : ModelBase
{
	Default
	{
		Scale 1.75;
		Height 48;
		+PUSHABLE
	}
}

class Generator3 : ModelBase
{
	Default
	{
		Radius 64;
		Height 128;
	}
}

class Generator4 : SwitchableDecoration
{
	Default
	{
		Scale .5;
		Radius 32;
		Height 64;
		+SOLID
	}
	States
	{
	Active:
		HLI1 A 12;
		HLI1 B 11;
		HLI1 C 10;
		HLI1 D 9;
		HLI1 E 8;
		HLI1 F 7;
		HLI1 G 6;
		HLI1 H 5;
		HLI1 I 4;
		HLI1 J 3;
		HLI1 K 2;
		HLI1 L 1;
	Spawn:
		HLI1 ABCDEFGHIJKL 1;
		Loop;
	Inactive:
		HLI1 A 1;
		HLI1 B 2;
		HLI1 C 2;
		HLI1 D 4;
		HLI1 E 5;
		HLI1 F 6;
		HLI1 G 7;
		HLI1 H 8;
		HLI1 I 9;
		HLI1 J 10;
		HLI1 K 11;
		HLI1 L 12;
		HLI1 A -1;
		Stop;
	}
}

class girder1 : ModelBase
{
	Default
	{
		Radius 34;
		Height 416;
	}
}

class girder2 : girder1
{
	Default
	{
		Height 64;
		+NOGRAVITY
	}
}

class girder3 : girder2
{
	Default
	{
		Scale 4;
		Radius 136;
		Height 1664;
	}
}

class girder4 : girder3
{
	Default
	{
		Radius 128;
		Height 416;
	}
}

//===================================================
// Non-spawnable models
// Commodes, urinals, desks, chairs, filing cabinets
//===================================================

class Toilet1 : ModelBase
{
	Default
	{
		Scale .83;
		Radius 16;
		Height 28;
	}
}
class Toilet2 : Toilet1{}
class ToiletStainless : Toilet1
	{Default{Scale 1.8;}}
class Urinal1 : Toilet1
{
	Default
	{
		Scale .6;
		Height 40;
	}
}

class Armchair : ModelBase
	{Default{Height 29;}}
class Sofa : Armchair{}

class Chair1 : ModelBase
{
	Default
	{
		Scale .9;
		Radius 10;
		Height 32;
		+PUSHABLE
	}
}
class Chair2 : Chair1
	{Default{Scale .7;}}
class Chair3 : Chair1
	{Default{Scale 1;}}

class Desklamp1 : ModelBase
{
	Default
	{
		Scale .4;
		Radius 4;
		Height 16;
		+PUSHABLE
	}
}
class Desklamp2 : Desklamp1{}

class Desk1 : ModelBase
	{Default{Height 32;}}

class Desk2 : ModelBase
{
	actor block[2];
	vector3 blockpos[2];
	vector2 blocksize[2];
	override void postbeginplay()
	{
		blockpos[0] = (0, 21, 16);
		blockpos[1] = (0, -21, 16);
		blocksize[0] = (20, 11);
		blocksize[1] = (20, 11);

		for(int i = 0; i <= 1; i++)
			block[i] = BuildBridge(blockpos[i], blocksize[i], angle, tid, self);

		super.postbeginplay();
	}
	override void tick()
	{
		for(int i = 0; i <= 1; i++)
			MoveBridge(block[i], blockpos[i]);
		super.tick();
	}
	Default
	{
		Scale .8;
	}
}
class Desk3 : Desk2{}
class Desk4 : Desk2{}
class Desk5 : Desk2{}
class Desk6 : Desk2{}

class HandDryer : ModelFloat
{
	Default
	{
		Scale 1.5;
		Radius 4;
		Height 8;
	}
}

class Sink1 : ModelFloat
{
	Default
	{
		Scale 1.75;
		Radius 8;
		Height 16;
	}
}

class Sink2 : ModelFloat
{
	Default
	{
		Scale 2.2;
		Radius 16;
		Height 20;
	}
}
class SoapDispenser : HandDryer
	{Default{Radius 8;}}

class ToiletPaper : HandDryer
	{Default{Height 4;}}

class Bed01 : ModelBase
{
	override void postbeginplay()
	{
		let matt=Spawn("Mattress01",(pos));
		matt.frame=(random(0,1));
	}
	Default
	{
		Height 24;
	}
}

class Bed02 : ModelBase
{
	override void postbeginplay()
	{
		let matt=Spawn("Mattress02",(pos));
		matt.frame=(random(0,1));
	}
	Default
	{
		Radius 16;
		Height 36;
	}
}

class Mattress01 : ModelBase
	{Default{+NOCLIP}}
class Mattress02 : Mattress01{}

class FileCab2 : ModelBase
{
	Default
	{
		Radius 12;
		Height 32;
	}
}

class FileCab3: FileCab2
	{Default{Height 48;}}

class DeerHead : ModelFloat
{
	Default
	{
		Scale 1.25;
		Radius 32;
		Height 40;
	}
}

class VidCam1 : ModelBase
{
	Default
	{
		Radius 16;
		Height 56;
	}
}

class VidCam2 : VidCam1
	{Default{Radius 10;}}

class TankGlass : ModelBase
{
	Default
	{
		Radius 2;
		Height 2;
		RenderStyle "Translucent";
		Alpha .5;
		-SOLID
	}
}

//=======================
// Non-spawnable models
// Pipes, tanks, valves
//=======================

class Pipe1 : ModelBase
{
	actor block[6];
	vector3 blockpos[6];
	vector2 blocksize[6];
	override void postbeginplay()
	{
		blockpos[0] = (0, 63, 0);
		blockpos[1] = (0, 111, 0);
		blockpos[2] = (0, 159, 0);
		blockpos[3] = (0, -63, 0);
		blockpos[4] = (0, -111, 0);
		blockpos[5] = (0, -159, 0);

		blocksize[0] = (20, 46);
		blocksize[1] = (20, 46);
		blocksize[2] = (20, 46);
		blocksize[3] = (20, 46);
		blocksize[4] = (20, 46);
		blocksize[5] = (20, 46);

		for(int i = 0; i <= 5; i++)
			block[i] = BuildBridge(blockpos[i], blocksize[i], angle, tid, self);

		super.postbeginplay();
	}
	override void tick()
	{
		for(int i = 0; i <= 5; i++)
			MoveBridge(block[i], blockpos[i]);
		super.tick();
	}
	Default
		{Height 46;}
}
class Pipe1a : pipe1{}

class Pipe2 : ModelBase
	{Default{Height 66;}}

class Pipe3 : ModelBase
{
	actor block[4];
	vector3 blockpos[4];
	vector2 blocksize[4];
	override void postbeginplay()
	{
		blockpos[0] = (0, 32, 0);
		blockpos[1] = (0, 72, 0);
		blockpos[2] = (0, -32, 0);
		blockpos[3] = (0, -72, 0);
		blocksize[0] = (10, 29);
		blocksize[1] = (10, 29);
		blocksize[2] = (10, 29);
		blocksize[3] = (10, 29);

		for(int i = 0; i <= 3; i++)
			block[i] = BuildBridge(blockpos[i], blocksize[i], angle, tid, self);

		super.postbeginplay();
	}
	override void tick()
	{
		for(int i = 0; i <= 3; i++)
			MoveBridge(block[i], blockpos[i]);
		super.tick();
	}
	Default
	{
		Scale .5;
		Radius 10;
		Height 29;
	}
}
class Pipe3a : Pipe3{}
class Pipe4 : ModelBase
{
	Default
	{
		Scale .5;
		Radius 10;
		Height 33;
	}
}

class pipe5 : ModelBase
{
	Default
	{
		Scale .75;
		Radius 8;
		Height 136;
	}
}

class pipe6 : ModelBase
{
	Default
	{
		Scale .5;
		Radius 6;
		Height 68;
	}
}

class pipe7 : ModelBase
{
	Default
	{
		Radius 12;
		Height 181;
	}
}

class pipe8 : ModelBase
{
	Default
	{
		Scale 1.5;
		Radius 16;
		Height 272;
	}
}

class PipeMaze : ModelFloat
{
	Default
	{
		Radius 64;
		Height 28;
	}
}

class Tank01 : ModelBase
{
	Default
	{
		Radius 28;
		Height 86;
	}
}

class Tank02 : ModelBase
{
	Default
	{
		Radius 15;
		Height 36;
	}
}
class Tank02a : Tank02
	{Default{Radius 4;}}

class tank03 : ModelBase
{
	Default
	{
		Scale 5;
		Radius 6;
	}
}

class tank04 : ModelBase
{
	Default
	{
		Scale 6;
		Radius 72;
		Height 264;
	}
}

class tank05 : Tank02
{
	Default
	{
		Scale 5;
		Radius 12;
	}
}

class tank06 : ModelBase
{
	Default
	{
		Scale 3;
		Radius 36;
		Height 128;
	}
}

class propane1a : ModelBase
{
	actor block[2];
	vector3 blockpos[2];
	vector2 blocksize[2];
	override void postbeginplay()
	{
		blockpos[0] = (32, 0, 0);
		blockpos[1] = (-32, 0, 0);
		blocksize[0] = (20, 40);
		blocksize[1] = (20, 40);

		for(int i = 0; i <= 1; i++)
			block[i] = BuildBridge(blockpos[i], blocksize[i], angle, tid, self);

		super.postbeginplay();
	}
	override void tick()
	{
		for(int i = 0; i <= 1; i++)
			MoveBridge(block[i], blockpos[i]);
		super.tick();
	}
	Default
	{
		Scale 3;
		Height 40;
	}
}
class propane1b : propane1a{}
class propane1c : propane1a{}

class propane2 : ModelBase
{
	Default
	{
		Scale .8;
		Radius 10;
		Height 36;
	}
}

class Valve1 : ModelBase
{
	Default
	{
		Radius 24;
		Height 50;
	}
}

//===========================
// Non-spawnable models
// Radios, toolboxes
//===========================

class Toolbox1 : ModelBase
{
	Default
	{
		Height 40;
		+PUSHABLE
	}
}
class Toolbox2 : Toolbox1
{
	Default
	{
		Height 48;
		Scale .8;
	}
}

class Radio1 : ModelBase
{
	Default
	{
		Scale .5;
		Radius 8;
		Height 8;
	}
}

class Radio2 : ModelBase
{
	Default
	{
		Scale .4;
		Radius 16;
		Height 12;
	}
}

class Radio3 : Radio1
{
	Default
	{
		Radius 4;
		Height 12;
	}
}

class Radio4 : Radio1
	{Default{Radius 10;}}
class Radio5 : Radio2
{
	Default
	{
		Scale 1;
		Radius 2;
	}
}

//====================================================================
// Non-spawnable models
// Trees, plants, cacti
//====================================================================

class Palm1a : ModelBase
{
	Default
	{
		Scale 20;
		Radius 8;
		Height 340;
	}
}
class Palm1b : Palm1a{}
class Palm2a : ModelBase
	{Default{Radius 8;Height 256;}}
class Palm2b : Palm2a{}
class Palm3a : Palm1a
{
	Default
	{
		Scale .5;
		Height 160;
	}
}
class Palm3b : Palm3a{}
class Palm3c : Palm3a{}
class Cactus : Palm2a
	{Default{Height 128;}}

class Fern : ModelBase
	{Default{Radius 16;}}

class Plant1 : Palm2a
{
	Default
	{
		Height 8;
	}
	States
	{
	Spawn:
		HLI1 A 1 A_CheckRangeRev(radius+30,"Shrink");
		Loop;
	Shrink:
		HLI1 A 1 {scale.y=.8;}
		HLI1 A 1 A_CheckRange(radius+30,"Grow");
		Wait;
	Grow:
		HLI1 A 1 {scale.y=1;}
		Goto Spawn;
	}
	state A_CheckRangeRev(double distance,statelabel label,bool two_dimension=false)
		{return CheckRange(distance,two_dimension)?null:ResolveState(label);}
}
class Plant2 : Plant1
	{Default{Radius 16;}}

class StreetLamp : SwitchableDecoration
{
	Default
	{
		Radius 4;
		Height 160;
		+SOLID
	}
    States
    {
    Spawn:
    Active:
		HLI1 A -1 LIGHT("STREETLAMP");
		Loop;
    Inactive:
		HLI1 B -1;
		Stop;
    }
}

class Glass01 : TankGlass
{
	Default
	{
		Radius 16;
		Height 16;
		+NOGRAVITY
	}
}

class RKive : ModelBase
{
	Default
	{
		Scale .8;
		Radius 8;
	}
}

class BookShelf1a : RKive
	{Default{Height 64;}}
class BookShelf1b : BookShelf1a{}
class BookShelf2a : BookShelf1a{}
class BookShelf2b : BookShelf1a{}

class Credenza : ModelBase
{
	Default
	{
		Scale .68;
		Radius 12;
		Height 26;
	}
}
class CredenzaShort : Credenza{}
class Credenza2 : Credenza
	{Default{Scale .57;}}
class ConfTable : Credenza
	{Default{Scale .46;}}

class Ashtray : ModelBase
{
	Default
	{
		Scale .7;
		Radius 2;
		Height 2;
	}
}
class AshtrayCig : Ashtray{}

class Phone1 : ModelBase
{
	Default
	{
		Scale .25;
		Radius 4;
		Height 4;
	}
}
class Phone2 : Phone1
	{Default{Scale .2;}}
class Phone3 : Phone1
{
	Default
	{
		Scale .7;
		+NOGRAVITY
	}
}

class Rock01 : ModelBase
{
	Default
	{
		Radius 24;
		Height 360;
	}
}
class Rock01a : Rock01{}
class Rock01b : Rock01{}
class Rock01c : Rock01{}
class Rock02 : Rock01{}
class Rock02a : Rock01{}
class Rock02b : Rock01{}
class Rock02c : Rock01{}
class Rock02d : Rock01{}
class Rock02e : Rock01{}

class Rock02f : ModelBase
{
	Default
	{
		Scale 1.25;
		Radius 60;
		Height 450;
	}
}

class Rock02g : ModelBase
{
	Default
	{
		Scale 1.5;
		Radius 72;
		Height 476;
	}
}

class Rock03 : Rock01{}
class Rock03a : Rock01{}
class Rock03b : Rock01{}
class Rock03c : Rock01{}
class Rock03d : Rock01{}
class Rock03e : Rock01{}
class Rock03f : Rock02f{}
class Rock03g : Rock02g{}

class Rock04 : ModelBase
{
	Default
	{
		Radius 48;
		Height 148;
	}
}
class Rock04a : Rock04{}
class Rock04b : Rock04{}
class Rock04c : Rock04{}

class Rock05 : Rock04
{
	Default
	{
		Height 100;
		Scale .125;
	}
}
class Rock05a : Rock05{}
class Rock06 : Rock05{}
class Rock06a : Rock05{}

class TechPillar1a : ModelBase
{
	Default
	{
		Radius 16;
		Height 214;
	}
}
class TechPillar1b : TechPillar1a{}
class TechPillar1c : TechPillar1a{}

class TechPillar1aa : ModelBase
{
	Default
	{
		Scale .75;
		Radius 12;
		Height 160;
	}
}
class TechPillar1bb : TechPillar1aa{}
class TechPillar1cc : TechPillar1aa{}

class TechPillar2 : TechPillar1a
	{Default{Height 188;}}

class TechClamp : ModelFloat
{
	Default
	{
		Radius 96;
		Height 256;
		+SPAWNCEILING
	}
}

class TechClampa : TechClamp
{
	Default
	{
		Scale .5;
		Radius 48;
		Height 128;
	}
}

class HoverPad : ModelBase
{
	Default
	{
		Scale 1.8;
		Radius 28;
		Height 1;
		-SOLID
	}
}

class PConsole : ModelBase
{
	Default
	{
		Radius 12;
		Height 32;
		Scale 2.2;
	}
}
class PConsole1 : PConsole{}
class PConsole2 : PConsole{}
class PConsole3 : PConsole{}
class PConsole4 : PConsole{}
class PConsole5 : PConsole{}

//======================================
// Concrete Jersey Barriers:
// Spawning will require rising sectors
// or invisible bridge things
//======================================

class Barrier1 : ModelBase
{
	Default
	{
		Scale 1.8;
		Radius 4;
		Height 32;
	}
}
class Barrier2 : Barrier1{}
class Barrier3 : Barrier1{}

//============================
// Explosive barrels & crates
//============================

class ExplosiveItemBangCrate : Actor
{
	Default
	{
		Scale .6;
		Radius 4;
		Height 4;
		RenderStyle "Translucent";
		Alpha .9;
		+NOINTERACTION
	}
	States
	{
	Spawn:
		CBNG ABC 2 BRIGHT LIGHT("CRATE_X2");
		CBNG DEFGH 2 BRIGHT LIGHT("CRATE_X1");
		CBNG IJKL 2 BRIGHT LIGHT("CRATE_X2");
		CBNG MNOP 2 BRIGHT LIGHT("CRATE_X3");
		CBNG QRS 2 BRIGHT LIGHT("CRATE_X4");
		CBNG TU 2;
		Stop;
	}
}
class ExplosiveItemBangBarrel : ExplosiveItemBangCrate
{
	Default
	{
		Scale .4;
	}
	States
	{
	Spawn:
		CBNG ABC 2 BRIGHT LIGHT("BARREL_X2");
		CBNG DEFGH 2 BRIGHT LIGHT("BARREL_X1");
		CBNG IJKL 2 BRIGHT LIGHT("BARREL_X2");
		CBNG MNOP 2 BRIGHT LIGHT("BARREL_X3");
		CBNG QRS 2 BRIGHT LIGHT("BARREL_X4");
		CBNG TU 2;
		Stop;
	}
}

class Xbarrel1 : ModelBase
{
	Default
	{
		Health 50;
		Radius 12;
		Height 32;
		DeathSound "world/barrelx";
		Obituary "%o stood too close to an exploding barrel.";
		+PUSHABLE
		+SHOOTABLE
		+NOBLOOD
	}
	States
	{
	Death:
		HLI1 B 0 A_SpawnItemEx("ExplosiveItemBangBarrel");
		HLI1 B 2 A_AlertMonsters;
		HLI1 C 2 A_Scream;
		HLI1 D 1 A_Explode;
		HLI1 D 1 A_SetRenderStyle(.5,STYLE_Translucent);
		HLI1 EE 1 A_FadeOut;
		HLI1 F 2 A_NoBlocking;
		HLI1 GG 1 A_FadeOut;
		Stop;
	}
}
class Xbarrel2 : Xbarrel1
	{Default{Health 20;}}
class Xbarrel3 : Xbarrel1
	{Default{Health 30;}}

class Xcrate01 : Xbarrel3
{
	Default
	{
		-PUSHABLE
		Radius 32;
		Height 64;
		Mass 200;
		Obituary "%o stood too close to an exploding crate.";
	}
	States
	{
	Death:
		HLI1 B 0 A_SpawnItemEx("ExplosiveItemBangCrate");
		Goto Super::Death+1;
	}
}
class Xcrate02 : Xcrate01{}

//================================================================
// Non-Explosive barrels/trashcan (plastic & heavy metal), crates
//================================================================

class Trashcan1 : XBarrel1
{
	Default
	{
		Radius 10;
		Height 29;
		Mass 50;
		+NOTAUTOAIMED
		+NODAMAGE
	}
}

class Barrel1 : Trashcan1
{
	Default
	{
		Scale 2;
		Radius 8;
	}
}
class Barrel2 : Barrel1{}

class Barrel3 : Barrel1
{
	Default
	{
		Scale .3;
		Radius 9;
		Mass 200;
	}
}

class Xcrate03 : Trashcan1
{
	Default
	{
		Health 30;
		Radius 32;
		Height 64;
		Mass 200;
	}
}
class Xcrate04 : Xcrate03{}

class XMetalBox : ModelFloat
{
	Default
	{
		Radius 34;
		Height 64;
	}
}

class XMetalBox1 : ModelFloat
{
	Default
	{
		Radius 136;
		Height 256;
	}
}

//============================================
// Non-Player Character Models: Controller,
// Administrator, Col. Stinson, Legion: Earth
//============================================

class HintMan : ModelBase
{
	Default
	{
		Height 56;
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	Sit:
		HLS1 A -1 A_SetScale(scale.x*.9);
		Stop;
	}
}

class HintManSitting : RandomSpawner
{
	Default
	{
		DropItem "HintMan";
	}
	override void PostSpawn(Actor spawned)
	{
		spawned.bNOCLIP=1;
		spawned.SetStateLabel("Sit");
	}
}

class Admin01 : ModelBase
{
	override void HLModelSetup()
	{
		static const name modelskin[]=
		{
			'wheelchair_sci_000.png',
			'wheelchair_sci_001.png',
			'wheelchair_sci_002.png',
			'wheelchair_sci_003.png',
			'wheelchair_sci_004.png',
			'wheelchair_sci_005.png',
			'wheelchair_sci_006.png',
			'wheelchair_sci_007.png',
			'wheelchair_sci_008.png',
			'wheelchair_sci_009.png',
			'wheelchair_sci_010.png',
			'wheelchair_sci_011.png',
			'wheelchair_sci_012.png',
			'wheelchair_sci_013.png'
		};
		for(int i = 0; i <= 13; i++)
			A_ChangeModel("", 0, "Models", "wheelchair_sci.iqm", i, "Models", modelskin[i], CMDL_USESURFACESKIN);
	}
	Default
	{
		Radius 22;
		Height 40;
		+DECOUPLEDANIMATIONS
	}
	States
	{
	Spawn:
		HLI1 A -1 NODELAY SetAnimation('idle', 20, flags: SAF_LOOP|SAF_NOOVERRIDE);
		Stop;
	}
}