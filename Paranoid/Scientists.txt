class HLScientistSpawner : RandomSpawner
{
	Default
	{
		+FRIENDLY
		DropItem "HLScientist1";
		DropItem "HLScientist2";
		DropItem "HLScientist3";
		DropItem "HLScientist4";
	}
}

class HLScientistWandererSpawner : HLScientistSpawner
{
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1(spawned);
		me.wanderer=1;
	}
}

class HLScientistStillSpawner : HLScientistSpawner
{
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1(spawned);
		me.still=1;
	}
}

class HLScientistQuietSpawner : HLScientistSpawner
{
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1(spawned);
		me.quiet=1;
	}
}

class HLScientistSlumpedSpawner : HLScientistSpawner
{
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1(spawned);
		me.sit=1;
		me.SetStateLabel("Sit");
		me.Height=28;
		me.bNOPAIN=1;
	}
}

class HLScientistDeadSpawner : RandomSpawner
{
	Default
	{
		DropItem "HLScientist1Dead";
		DropItem "HLScientist2Dead";
		DropItem "HLScientist3Dead";
		DropItem "HLScientist4Dead";
	}
}

//**************************************************************************
//**************************************************************************

class HLScientist1 : HLMonster
{
	bool greeting,wanderer,still,quiet,sit;
	int limit,limit2,boredom,stay,panic;
	override void PostBeginPlay()
	{
		limit=random(30,60);
		limit2=random(30,60);
	}
	override bool Used(Actor user)
	{
		if(!bFRIGHTENED&&!sit)
			A_PlaySound("scientist/greeting");
		boredom=0;
		greeting=1;
		return false;
	}
	Default
	{
		Health 25;
		GibHealth -100;
		Speed 1.666667;
		Height 56;
		PainChance 255;
		+FRIENDLY
		-CANUSEWALLS
		-COUNTKILL
		SeeSound "scientist/sight";
		PainSound "scientist/pain";
		DeathSound "scientist/death";
		Species "BlackMesa";
	}
	States
	{
	Spawn:
		HLI1 A 0 NODELAY
		{
			if(wanderer)
				SetStateLabel("See");
			if(!still)
				boredom=1;
		}
	Idle:
		HLI1 A 0 A_Jump(96,"Fidget1","Fidget2");
		HLI1 ABCDEFGHIJKLMNOP 5 A_HLScientistPonderCheck;
		Loop;
	Fidget1:
		HLI1 QRSTUVWXYZ[\] 3;
		HLI2 ABCDEFGHIJKLMNOPQRSTUVW 3;
		Goto Idle+1;
	Fidget2:
		HLI2 XYZ[\] 3;
		HLI3 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 3;
		HLI4 A 3;
		Goto Idle+1;
	See:
		TNT1 A 0
		{
			if(bFRIGHTENED)//scream the 1st time they enter here
			{
				A_PlaySound("scientist/sight");
				SetStateLabel("SeeDecidePanic");
			}
			if(still)
				SetStateLabel("Idle");
			A_SetSpeed(5.0/3.0);
		}
	Wandering:
		HLW1 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1
		{
			if(boredom)
				SetStateLabel("Spawn");
			else
				A_Chase();
		}
		HLW1 A 0
		{
			if(wanderer&&random(0,255)<32)
				SetStateLabel("Idle");
		}
		Loop;
	Panic:
		TNT1 A 0
		{
			A_ClearTarget();
			bFRIGHTENED=1;
			if(random(0,1))
				SetStateLabel("WanderRunStartPanic");
		}
	WanderPanic:
		HLW1 A 0 A_SetSpeed(5.0/3.0);
		HLW1 AABBCC 1 A_Chase;
		HLW1 D 0 A_Look;
		HLW1 DDEEFF 1 A_Chase;
		HLW1 G 0 A_Look;
		HLW1 GGHHII 1 A_Chase;
		HLW1 J 0 A_Look;
		HLW1 JJKKLL 1 A_Chase;
		HLW1 M 0 A_Look;
		HLW1 MMNNOOPP 1 A_Chase;
		//HLW1 A 0 A_Look;
		//HLW1 QQ 1 A_Chase;
		HLW1 A 0	//how often they'll say something while moving
		{
			if(!random(0,32))
			{
				A_PlaySound("scientist/panic");
				return ResolveState("WanderPanic");
			}
			if(!random(0,64))
			{
				if(random(0,255)<235)
					return ResolveState("IdleRegPanic");	//stopmov, ironically also randomly starts the run seq
				return ResolveState("WanderRunStartPanic");	//kind of rare to see them running just because of nothing.
			}
			return state(null);
		}
		Loop;
	IdleRegPanic:
		TNT1 A 0
		{
			if(random(0,255)<3)
				A_PlaySound("scientist/panic");
		}
		HLI1 AAA 5 A_Look;
		HLI1 A 0 A_Jump(5,"WanderPanic");
		Loop;
	SeeDecidePanic:		//decide if they calm down or not
		HLR1 A 0 A_JumpIf(panic>=limit,"SeeCalmDownPanic");
	SeeLoopPanic:
		HLR1 A 0 A_SetSpeed(5);
		HLR1 ABCDEFGHIJKLMNOPQRS 1 A_Chase;
		HLR1 A 0
		{
			panic++;
			if(random(0,255)<4)//every once in a while it will say something
			{
				A_PlaySound("scientist/sight");
				SetStateLabel("SeeLoopPanic");
			}
		}
		Goto SeeDecidePanic;
	SeeCalmDownPanic:
		TNT1 A 0
		{
			panic-=8;	//If decides to go running again, will last a bit more
			if(random(0,255)<160)
				SetStateLabel("WanderRunPanic");
			else
			{
				panic=0;
				A_ClearTarget();
			}
		}
		Goto WanderPanic;
	WanderRunStartPanic:		//scream the 1st time they enter here
		TNT1 A 0 A_PlaySound("scientist/sight");
	WanderRunDecidePanic:	//decide if they calm down or not
		TNT1 A 0
		{
			if(panic>=limit)
			{
				panic-=8;	//If decides to go running again, will last a bit more
				if(random(0,255)>=160)
				{
					panic=0;
					SetStateLabel("WanderPanic");
				}
			}
		}
	WanderRunPanic:		//not calmed at all
		HLR1 A 0 A_SetSpeed(5);
		HLR1 ABC 1 A_Chase;
		HLR1 D 0 A_Look;
		HLR1 DEF 1 A_Chase;
		HLR1 G 0 A_Look;
		HLR1 GHI 1 A_Chase;
		HLR1 J 0 A_Look;
		HLR1 JKL 1 A_Chase;
		HLR1 M 0 A_Look;
		HLR1 MNO 1 A_Chase;
		HLR1 P 0 A_Look;
		HLR1 PQRS 1 A_Chase;
		HLR1 A 0 A_Look;
		HLR1 A 0
		{
			panic++;
			if(random(0,255)<4)//every once in a while it will say something
			{
				A_PlaySound("scientist/sight");
				SetStateLabel("WanderRunPanic");
			}
		}
		Goto WanderRunDecidePanic;
	Pain:
		HLP1 A 1 A_Pain;
		HLP1 BCDEFGHI 1;
		Goto See;
	Death:
		HLD1 A 1 A_Scream;
		HLD1 BC 1;
		HLD1 D 1 A_NoBlocking;
		HLD1 EFGHIJKLMNOPQRS 1;
		HLD1 T 1 A_PlaySound("halflife/weapons/bodydrop");
		HLD1 UVW 1;
		HLD1 X -1;
		Stop;
	XDeath:
	Crush:
		TNT1 A 0 A_HLGibs;
		Stop;
	Sit:
		HLS1 ABCDEFGHIJKLMNOP 5;
		Loop;
	}
	void A_HLScientistPonderCheck()
	{
		if(wanderer&&!random(0,26))
			SetStateLabel("See");
		else if(!still&&!quiet)
		{
			if(!random(0,160))
			{
				boredom=0;
				SetStateLabel("See");
			}
			else if(!boredom)
			{
				if(!greeting)
					A_PlaySound("scientist/idle");
				greeting=0;
				SetStateLabel("See");
			}
		}
		else if(!random(0,255))
			A_PlaySound("scientist/idle");
	}
}

class HLScientist2 : HLScientist1{}
class HLScientist3 : HLScientist1{}
class HLScientist4 : HLScientist1{}

class HLScientist1Dead : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		HLD1 X -1;
		Stop;
	}
}

class HLScientist2Dead : HLScientist1Dead{}
class HLScientist3Dead : HLScientist1Dead{}
class HLScientist4Dead : HLScientist1Dead{}