enum ParanoidEnum
{
	HLSMOOTHCHASE=CHF_NOPLAYACTIVE+CHF_NORANDOMTURN+CHF_STOPIFBLOCKED
}

class HLMonster : Actor
{
	double ModelHeightMul;

	int walktic,walkticcur;
	Property WalkTic:walktic;
	override void BeginPlay()
	{
		GetModelHeightMul();
		ModelHeightSetup();
		HLModelSetup();
		super.BeginPlay();
	}
	void GetModelHeightMul()
	{
		if(level.PixelStretch == 1.0)
			ModelHeightMul = 1.2;
		else
			ModelHeightMul = 1.0;
	}
	virtual void ModelHeightSetup()
	{
		//let defaultHeight = GetDefaultByType(GetClass()).Height;
		//Height = defaultHeight * ModelHeightMul;
	}
	virtual void HLModelSetup(){}
	Default
	{
		Monster;
		+NOINFIGHTSPECIES
		+DOHARMSPECIES
		HLMonster.WalkTic 4;
		BloodType "HLBlood";
	}
	States
	{
	Spawn:
		HLI1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 2 A_Look;
		HLI2 AB 2 A_Look;
		Loop;
	}
	void A_HLGibs(int max=16,class<actor> gibs="HLGibs")
	{
		A_NoBlocking();
		A_StartSound("other/gibdeath");
		for(int i=0;i<max;i++)
			A_SpawnItemEx(gibs,random(5,-5),random(5,-5),random(10,40),random(1,7),random(1,7),random(5,13),random(0,359));
	}
	void A_XenGibsBig()
	{
		int i;
		for(i=0;i<10;i++)
			A_SpawnItemEx("ParanoidExplosion",random(30,-30),random(30,-30),random(10,90),random(1,2),random(1,2),random(1,3));
		for(i=0;i<9;i++)
			A_SpawnItemEx("XenGibs",random(5,-5),random(5,-5),random(10,40),random(1,7),random(1,7),random(5,13),random(0,359));
		scale=(2,2);
		for(i=0;i<22;i++)
			A_SpawnItemEx("XenGibs",random(30,-30),random(30,-30),random(10,60),random(1,7),random(1,7),random(5,18),random(0,359),SXF_TRANSFERSCALE);
	}
	void A_ZombieMelee(int dmg=2)
	{
		A_StartSound("halflife/monsters/zombie/attswing");
		A_CustomMeleeAttack(dmg*random(1,8),"halflife/monsters/zombie/hit");
	}
	virtual void A_HLChase(int walkticmax=0)
	{
		if(!walkticmax)
			walkticmax=walktic;
		if(walkticcur)
			A_Chase(null,null,HLSMOOTHCHASE);
		else
			A_Chase();
		walkticcur++;
		if(walkticcur>=walkticmax-1)
			walkticcur=0;
	}
}

class ModelProjectile : Actor
{
	double ModelHeightMul;

	override void BeginPlay()
	{
		GetModelHeightMul();
		ModelHeightSetup();
		HLModelSetup();
		super.BeginPlay();
	}
	void GetModelHeightMul()
	{
		if(level.PixelStretch == 1.0)
			ModelHeightMul = 1.2;
		else
			ModelHeightMul = 1.0;
	}
	virtual void ModelHeightSetup()
	{
		//let defaultHeight = GetDefaultByType(GetClass()).Height;
		//Height = defaultHeight * ModelHeightMul;
	}
	virtual void HLModelSetup(){}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class ModelBase : Actor
{
	double ModelHeightMul;

	override void BeginPlay()
	{
		GetModelHeightMul();
		ModelHeightSetup();
		HLModelSetup();
		super.BeginPlay();
	}
	void GetModelHeightMul()
	{
		if(level.PixelStretch == 1.0)
			ModelHeightMul = 1.2;
		else
			ModelHeightMul = 1.0;
	}
	virtual void ModelHeightSetup()
	{
		let defaultHeight = GetDefaultByType(GetClass()).Height;
		Height = defaultHeight * ModelHeightMul;
	}
	virtual void HLModelSetup(){}
	Default
	{
		+CANPASS
		+SOLID
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
	int blockmax;
	actor block[25];
	vector3 blockpos[25];
	vector2 blocksize[25];
	int ridermax;
	actor rider[25];
	vector3 riderpos[25];
	double riderangle[25];

	virtual void BlockingSetup(){}
	actor BuildBridge(vector3 bridgepos, vector2 bridgesize, double bridgeangle, int bridgetid, actor bridgemaster)
	{
		bool num;
		actor thisblock;
		[num, thisblock] = A_SpawnItemEx("InvisibleBridge", bridgepos.x, bridgepos.y, bridgepos.z * ModelHeightMul, angle: bridgeangle, flags: SXF_SETMASTER, tid: bridgetid);
		if(!thisblock)
			return null;
		thisblock.A_SetSize(bridgesize.x, bridgesize.y * ModelHeightMul);
		return thisblock;
	}
	void MoveBridge(actor thisblock, vector3 bridgepos)
	{
		if(thisblock)
			thisblock.A_Warp(AAPTR_MASTER, bridgepos.x, bridgepos.y, bridgepos.z * ModelHeightMul, 0, WARPF_STOP|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
	}
	actor BuildRider(class<Actor> type, vector3 riderpos = (0,0,0), double riderangle = 0)
	{
		actor rider = Spawn(type, pos + riderpos);
		if(!rider)
			return null;
		rider.angle = angle + riderangle;
		rider.master = self;
		rider.bNOCLIP=1;
		rider.bNOINTERACTION=1;
		rider.bNOGRAVITY=1;
		rider.bSOLID=0;
		rider.bSHOOTABLE=0;
		rider.bCOUNTKILL=0;
		rider.bCANPUSHWALLS=0;
		rider.bCANUSEWALLS=0;
		rider.bACTIVATEMCROSS=0;
		rider.bISMONSTER=0;
		return rider;
	}
	void MoveRider(actor rider, vector3 riderpos = (0,0,0), double riderangle = 0)
	{
		if(rider)
			rider.A_Warp(AAPTR_MASTER, riderpos.x, riderpos.y, riderpos.z, riderangle, WARPF_STOP|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
	}
	override void PostBeginPlay()
	{
		BlockingSetup();
		for(int i = 0; i < blockmax; i++)
		{
			block[i] = BuildBridge(blockpos[i], blocksize[i], angle, tid, self);
			//If a block would be placed beneath the floor, shrink it and move it up
			let masterfloor = GetZAt();
			let blockfloor = block[i].GetZAt();
			if(blockfloor > masterfloor)
			{
				blockpos[i].z += (blockfloor - masterfloor) / ModelHeightMul;
				blocksize[i].y -= blockpos[i].z;
			}
			block[i].A_SetSize(blocksize[i].x, blocksize[i].y * ModelHeightMul);
		}
		super.PostBeginPlay();
	}
	override void tick()
	{
		for(int i = 0; i < blockmax; i++)
			MoveBridge(block[i], blockpos[i]);
		for(int i = 0; i < ridermax; i++)
			MoveRider(rider[i], riderpos[i], riderangle[i]);
		super.tick();
	}
}
class ModelFloat : ModelBase
	{Default{+NOGRAVITY}}