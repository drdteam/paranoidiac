// ZScript HudMessage by Agent_Ash
// (c) Agent_Ash aka Jekyll Grim Payne aka jekyllgrim
class ParanoidHudMessageHandler : StaticEventHandler
{
	array < ParanoidHudMessage > hudmessages;

	override void WorldTick()
	{
		for (int i = 0; i < hudmessages.Size(); i++)
		{
			let hmsg = hudmessages[i];
			if (hmsg)
			{
				hmsg.Ticker();
			}
			else
			{
				hudmessages.Delete(i);
			}
		}
	}

	override void InterfaceProcess(ConsoleEvent e)
	{
		// test code (type "interfaceevent testhudmsg" in console to test):
		if (e.name == "testhudmsg")
		{
			ParanoidHudMessage.CreateUI("$GOTSHOTGUN", id: 1, fontname: 'BigUpper', fontcolor: Font.CR_Green, alignment: ParanoidHudMessage.ALIGN_CENTER, fadeinTime: 0, typeTime: 2, holdtime: 35, fadeOutTime: 50, scale: (0.5, 0.5));
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		// test code (type "netevent testhudmsg" in console to test):
		if (e.name == "testhudmsg")
		{
			ParanoidHudMessage.Create("$GOTSHOTGUN", id: 1, fontname: 'BigUpper', fontcolor: Font.CR_Green, alignment: ParanoidHudMessage.ALIGN_CENTER, fadeinTime: 0, typeTime: 2, holdtime: 35, fadeOutTime: 50, scale: (0.5, 0.5), playerNumber: e.Player);
		}

		if (e.name.IndexOf("createzshudmessage") >= 0)
		{
			array <string> msg;
			e.name.Split(msg,":");
			if (msg.Size() == 14)
			{
				ParanoidHudMessage.Create(
					msg[1], //text
					id: msg[2].ToInt(10),
					fontname: msg[3],
					fontcolor: msg[4].ToInt(10),
					pos: (msg[5].ToDouble(), msg[6].ToDouble()),
					alignment: msg[7].ToInt(10),
					fadeInTime: msg[8].ToInt(10),
					typeTime: msg[9].ToInt(10),
					holdTime: msg[10].ToInt(10),
					fadeOutTime: msg[11].ToInt(10),
					scale: (msg[12].ToDouble(), msg[13].ToDouble()),
					playerNumber: e.Player
				);
			}
			else
			{
				console.printf("\cgHudMessage.CreateUI error. Expected \cd14\cg arguments, got \cd%d", msg.Size());
			}
		}
	}

	override void RenderUnderlay(RenderEvent e)
	{
		int iconflags = BaseStatusBar.DI_SCREEN_TOP|BaseStatusBar.DI_SCREEN_HCENTER|BaseStatusBar.DI_NOSHADOW;
		for (int i = 0; i < hudmessages.Size(); i++)
		{
			let hmsg = hudmessages[i];
			if (hmsg && (hmsg.playernumber < 0 || hmsg.playerNumber == consoleplayer))
			{
				//console.printf("Drawing message '%s' at %.1f, %.1f | alpha %.2f", text, pos.x, pos.y, alpha);
				Screen.DrawText(
					hmsg.msgFont, hmsg.fontColor,
					hmsg.pos.x, hmsg.pos.y,
					hmsg.text,
					DTA_VirtualWidth, 320,
					DTA_VirtualHeight, 200,
					DTA_ScaleX, hmsg.scale.x,
					DTA_ScaleY, hmsg.scale.y,
					DTA_Alpha, hmsg.alpha,
					DTA_FulLScreenScale, FSMode_ScaleToFit43
				);
				StatusBar.DrawImage(hmsg.icon, (30, 50), iconflags, 1.0, scale: (.48,.4));
			}
		}
	}
}

class ParanoidHudMessage play
{
	int playerNumber;

	protected uint id;
	protected string fulltext;
	protected uint characters;
	protected uint curChar;

	string text, icon;
	Font msgFont;
	vector2 pos;
	int fontColor;
	vector2 scale;
	double alpha;

	protected uint duration;
	protected uint typeTime;
	protected uint totalTypeTime;
	protected uint fadeInTime;
	protected uint totalfadeInTime;
	protected uint fadeOutTime;
	protected uint totalfadeOutTime;
	protected vector2 virtualRes;

	enum ETextAlignment
	{
		ALIGN_CENTER,
		ALIGN_LEFT,
		ALIGN_RIGHT
	}

	static clearscope double LinearMap(double val, double source_min, double source_max, double out_min, double out_max, bool clampIt = false) {
		double d = (val - source_min) * (out_max - out_min) / (source_max - source_min) + out_min;
		if (clampit) {
			double truemax = out_max > out_min ? out_max : out_min;
			double truemin = out_max > out_min ? out_min : out_max;
			d = Clamp(d, truemin, truemax);
		}
		return d;
	}

	static ui void CreateUI(string text, uint id = 0, name fontname = 'NewSmallFont', int fontColor = Font.CR_Red, vector2 pos = (160, 50), int alignment = ALIGN_LEFT, uint fadeInTime = 0, uint typeTime = 0, uint holdTime = 35, uint fadeOutTime = 0, vector2 scale = (1,1))
	{
		EventHandler.SendNetworkEvent(
			String.Format(
				"createzshudmessage:%s:%d:%s:%d:%f:%f:%d:%d:%d:%d:%d:%f:%f",
				text, id, fontname, fontcolor, pos.x, pos.y, alignment, fadeinTime, typeTime, holdTime, fadeOutTime, scale.x, scale.y
			)
		);
	}

	static ParanoidHudMessage Create(string text, string icon = "TNT1A0", uint id = 0, name fontname = 'NewSmallFont', int fontColor = Font.CR_Red, vector2 pos = (160, 50), int alignment = ALIGN_LEFT, uint fadeInTime = 0, uint typeTime = 0, uint holdTime = 35, uint fadeOutTime = 0, vector2 scale = (1,1), int playerNumber = -1)
	{
		let hmsg = ParanoidHudMessage(New("ParanoidHudMessage"));
		let handler = ParanoidHudMessageHandler(StaticEventHandler.Find("ParanoidHudMessageHandler"));
		if (!handler)
		{
			ThrowAbortException("HUDMessage handler not found");
			return null;
		}
		if (hmsg)
		{
			hmsg.playerNumber = Clamp(playerNumber, -1, MAXPLAYERS);
			hmsg.scale = scale;
			// id:
			hmsg.id = id;
			if (id > 0)
			{
				for (int i = 0; i < handler.hudmessages.Size(); i++)
				{
					let othermsg = handler.hudmessages[i];
					if (othermsg && othermsg.id == id)
					{
						othermsg.Purge();
						break;
					}
				}
			}
			// icon:
			hmsg.icon = icon;
			// text:
			hmsg.fulltext = StringTable.Localize(text);
			hmsg.characters = hmsg.fulltext.Length();
			hmsg.msgFont = Font.FindFont(fontname);
			hmsg.fontColor = fontColor;
			if (typeTime == 0)
			{
				hmsg.text = hmsg.fulltext;
			}
			// pos:
			double textwidth = hmsg.msgFont.StringWidth(hmsg.fulltext) * scale.x;
			switch (alignment)
			{
			case ALIGN_CENTER:
				pos.x -= textwidth * 0.5;
				break;
			case ALIGN_RIGHT:
				pos.x -= textwidth;
				break;
			}
			hmsg.pos = pos;
			// times:
			hmsg.duration = holdTime;
			hmsg.totalFadeInTime = fadeInTime;
			hmsg.totalFadeOutTime = fadeOutTime;
			hmsg.typeTime = typeTime;
			hmsg.totalTypeTime = typeTime * hmsg.characters;
			hmsg.duration += max(fadeInTime, hmsg.totalTypeTime);
			if (fadeInTime <= 0)
			{
				hmsg.alpha = 1;
			}
			handler.hudmessages.Push(hmsg);
		}
		return hmsg;
	}

//	clearscope string, vector2, double, Font, int GetText()
//	{
//		return text, pos, alpha, msgFont, fontcolor;
//	}

	uint GetID()
	{
		return id;
	}

	void Purge()
	{
		fulltext = "";
	}

	void Ticker()
	{
		if (!fulltext)
		{
			Destroy();
			return;
		}

		// tic down duration:
		if (duration > 0)
		{
			duration--;
		}
		// if duration has run out, tic down fade-out time
		// and reduce alpha:
		else if (totalFadeOutTime > 0 && fadeOutTime < totalFadeOutTime)
		{
			alpha = LinearMap(fadeOutTime, 0, totalFadeOutTime, 1., 0.);
			fadeOutTime++;
		}
		// if both have run out, destroy this message:
		else
		{
			Destroy();
			return;
		}

		// fade-in time is handled separately because fade-in
		// and typing may happen at the same time, and the bigger
		// of the two values (totalTypeTime or fadeInTime) is
		// automatically added to duration on initialization:
		if (totalFadeInTime > 0 && fadeInTime < totalFadeInTime)
		{
			alpha = LinearMap(fadeInTime, 0, totalFadeInTime, 0., 1.);
			fadeInTime++;
		}

		// type the next character:
		if (totalTypeTime > 0 && curChar < characters)
		{
			if (totalTypeTime % typeTime == 0)
			{
				int codepoint, nextpos;
				[codepoint, nextpos] = fulltext.GetNextCodePoint(curChar);
				curChar = nextpos;
				//curChar++;
				//text = fulltext.Left(curChar);
				text.AppendCharacter(codepoint);
			}
			totalTypeTime--;
		}
	}
}

class ParanoidSoundTracker : Inventory
{
	int playing,countdown;
	override void DoEffect()
	{
		if(countdown ==1 )
			MessageItem.StopMessage(PlayerPawn(owner));
		if(countdown)
			countdown--;
	}
	Default
		{+INVENTORY.UNDROPPABLE}
}
class MessageItem : CustomInventory abstract
{
	override bool TryPickup(in out Actor toucher)
	{
		toucher.A_StartSound("radiostatic", CHAN_6, CHANF_LOCAL );
		PrintPickupMessage(1,"$NEWMESSAGE");
		return Super.TryPickup(toucher);
	}
	static void StopMessage(actor thisplayer)
	{
		if(!thisplayer)
			return;
		let mytracker=ParanoidSoundTracker(thisplayer.FindInventory("ParanoidSoundTracker"));
		if(!mytracker||!mytracker.playing)
			return;
		if(mytracker.playing!=2)
			thisplayer.A_StartSound("radiostatic", CHAN_6, CHANF_LOCAL);
		thisplayer.A_StopSound(7);
		mytracker.playing=0;
		ParanoidHudMessage.Create("", id: 1);
	}
	static void PlayMessage(actor thisplayer,string message,string icon="TNT1A0",int dur=0)
	{
		if(!thisplayer)
			return;
		let mytracker=ParanoidSoundTracker(thisplayer.FindInventory("ParanoidSoundTracker"));
		if(!mytracker)
			return;
		int playing=mytracker.playing;
		if(playing==2)
			return;
		if(playing==1)
		{
			StopMessage(thisplayer);
			if(icon!="TNT1A0")
				return;
		}
		if(icon=="TNT1A0")
			playing=2;
		else
			playing=1;
		mytracker.playing=playing;
		if(mytracker.playing!=2)
			thisplayer.A_StartSound("radiostatic", CHAN_6, CHANF_LOCAL);
		thisplayer.A_StartSound(message, CHAN_7, attenuation:ATTN_STATIC);
		string msg=StringTable.Localize("$"..message);
		double doubledur;
		if(dur)
			doubledur = dur;
		else
			doubledur = S_GetLength(message);
		double typetime = doubledur / double(msg.Length());
		typetime = min(ceil(typetime * TICRATE) - 1, 3);
		int ticdur = ceil(doubledur * TICRATE);
		mytracker.countdown = ticdur + 35;
		ParanoidHudMessage.Create(msg, icon: icon, id: 1, fontname: 'smallfont', fontcolor: Font.CR_GOLD,
		pos: (40, 15), alignment: ParanoidHudMessage.ALIGN_LEFT, fadeinTime: 0, typeTime: typetime,
		holdtime: 35 * 10, fadeOutTime: 0, scale: (0.5, 0.5));
	}
	string Portrait;
	Property Portrait:Portrait;
	Default
	{
		Tag "Message";
		Inventory.UseSound "";
		MessageItem.Portrait "TNT1A0";
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	States
	{
	Use:
		TNT1 A 0
		{
			String s=invoker.GetClassName();
			PlayMessage(PlayerPawn(invoker.owner),s.Mid(11,8),invoker.Portrait);
		}
		Fail;
	}
}

class MessageItemHintman : MessageItem abstract
	{Default{MessageItem.Portrait "HINTMAN";}}
class MessageItemHintman01 : MessageItemHintman abstract
	{Default{Inventory.Icon "MAIL01";}}
class MessageItemHintman02 : MessageItemHintman abstract
	{Default{Inventory.Icon "MAIL02";}}
class MessageItemHintman03 : MessageItemHintman abstract
	{Default{Inventory.Icon "MAIL03";}}
class MessageItemHintman04 : MessageItemHintman abstract
	{Default{Inventory.Icon "MAIL04";}}

class MessageItemStinson : MessageItem abstract
	{Default{MessageItem.Portrait "STINSON";}}
class MessageItemStinson01 : MessageItemStinson abstract
	{Default{Inventory.Icon "MAIL01";}}
class MessageItemStinson02 : MessageItemStinson abstract
	{Default{Inventory.Icon "MAIL02";}}
class MessageItemStinson03 : MessageItemStinson abstract
	{Default{Inventory.Icon "MAIL03";}}

class MessageItemUndernet : MessageItem abstract
	{Default{MessageItem.Portrait "UNDERNET";}}
class MessageItemUndernet02 : MessageItemUndernet abstract
	{Default{Inventory.Icon "MAIL02";}}

class MessageItemP1M2VOX1 : MessageItemHintman01{}	//P1M2: Message 1
class MessageItemP1M2VOX2 : MessageItemHintman02{}	//P1M2: Message 2
class MessageItemP1M2VOX3 : MessageItemHintman03{}	//P1M2: Message 3
class MessageItemP1M2VOX4 : MessageItemHintman04{}	//P1M2: Message 4
class MessageItemP1M3VOX1 : MessageItemHintman01{}	//P1M3: Message 1
class MessageItemP1M3VOX2 : MessageItemHintman02{}	//P1M3: Message 2
class MessageItemP1M3VOX3 : MessageItemHintman03{}	//P1M3: Message 3
class MessageItemP1M4VOX1 : MessageItemHintman01{}	//P1M4: Message 1
class MessageItemP1M4VOX2 : MessageItemHintman02{}	//P1M4: Message 2
class MessageItemP1M4VOX3 : MessageItemHintman03{}	//P1M4: Message 3
class MessageItemP1M4VOX4 : MessageItemHintman04{}	//P1M4: Message 4
class MessageItemP1M5VOX1 : MessageItemHintman01{}	//P1M5: Message 1
class MessageItemP1M5VOX2 : MessageItem{}			//P1M5: Message 2
class MessageItemP1M5VOX3 : MessageItem{}			//P1M5: Message 3
class MessageItemP1M6VOX1 : MessageItemHintman01{}	//P1M6: Message 1
class MessageItemP1M6VOX2 : MessageItemHintman02{}	//P1M6: Message 2
class MessageItemP1M6VOX3 : MessageItemHintman03{}	//P1M6: Message 3
class MessageItemP1M6VOX4 : MessageItem{}			//P1M6: Message 4
class MessageItemP1M6VOX5 : MessageItem{}			//P1M6: Message 5
class MessageItemP1M6VOX6 : MessageItem{}			//P1M6: Message 6
class MessageItemP1M6VOX7 : MessageItem{}			//P1M6: Message 7
class MessageItemP1M7VOX1 : MessageItemHintman01{}	//P1M7: Message 1
class MessageItemP1M7VOX2 : MessageItemHintman02{}	//P1M7: Message 2
class MessageItemP1M7VOX3 : MessageItem{}			//P1M7: Message 3
class MessageItemP1M8VOX1 : MessageItemHintman01{}	//P1M8: Message 1
class MessageItemP1M8VOX2 : MessageItemHintman02{}	//P1M8: Message 2

class MessageItemP2M1VOX1 : MessageItemStinson01{}	//P2M1: Message 1
class MessageItemP2M2VOX1 : MessageItemStinson01{}	//P2M2: Message 1
class MessageItemP2M2VOX2 : MessageItem{}			//P2M2: Message 2
class MessageItemP2M3VOX1 : MessageItemStinson01{}	//P2M3: Message 1
class MessageItemP2M3VOX2 : MessageItemUndernet02{}	//P2M3: Message 2
class MessageItemP2M4VOX1 : MessageItemStinson01{}	//P2M4: Message 1
class MessageItemP2M4VOX2 : MessageItemUndernet02{}	//P2M4: Message 2
class MessageItemP2M5VOX1 : MessageItemStinson01{}	//P2M5: Message 1
class MessageItemP2M5VOX2 : MessageItemStinson02{}	//P2M5: Message 2
class MessageItemP2M6VOX1 : MessageItemStinson01{}	//P2M6: Message 1
class MessageItemP2M7VOX1 : MessageItemStinson01{}	//P2M7: Message 1
class MessageItemP2M7VOX2 : MessageItemUndernet02{}	//P2M7: Message 2
class MessageItemP2M7VOX3 : MessageItemStinson03{}	//P2M7: Message 3
class MessageItemP2M8VOX1 : MessageItemStinson01{}	//P2M8: Message 1