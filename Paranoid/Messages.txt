// Dialogue sequences base class
Class mkDialogueSequence : HUDMessageBase
{
	PlayerInfo p;
	int curdelay,delaycnt,charcnt,col,tspeed;
	bool bStarted,bInText;
	transient BrokenLines lines;
	String savedtext,msg,icon;
	transient Font tfont;
	mkDialogueSequence Init(string msg,PlayerInfo p,double typetime,string icon)
	{
		self.p=p;
		self.col=Font.CR_GOLD;
		self.tspeed=int(typetime*35.0/1.5);
		self.icon=icon;
		self.msg=msg;
		return self;
	}
	protected void StartText(string cont,bool rebuild=false)
	{
		String loc=cont;
		savedtext=cont;
		if(cont.CharAt(0)=="$")
			loc=StringTable.Localize(cont);
		if(!tfont)
			tfont=Font.GetFont('smallfont');
		lines=tfont.BreakLines(loc,360);
		//these two mustn't be reset on BrokenLines rebuilding
		if(!rebuild)
		{
			charcnt=0;
			bInText=true;
		}
	}
	protected virtual void DialogueSeq()
	{
		//Stop command
		if(!msg.length())
			StartText("");
		else
			StartText("$"..msg);
	}
	private int TotalLength()
	{
		if(!lines)
			StartText(savedtext,true);
		int len=0;
		for(int i=0;i<lines.Count();i++)
			len+=lines.StringAt(i).Length();
		return len;
	}
	private String GetChar(int pos)
	{
		if(!lines)
			StartText(savedtext,true);
		int cur=pos;
		for(int i=0;i<lines.Count();i++)
		{
			int len=lines.StringAt(i).Length();
			if(cur<len)
				return lines.StringAt(i).CharAt(cur);
			cur-=len;
		}
		return "";
	}
	private void AdvanceText(bool bSkip)
	{
		String whitespace=" \t\n";
		String punctuation=",;:.?!";
		charcnt++;
		String ch=GetChar(charcnt);
		// skip over color escapes
		if(ch=="\c")
		{
			ch=GetChar(++charcnt);
			if(ch=="[")
			{
				while((ch=GetChar(++charcnt))!="]");
					charcnt++;
			}
		}
		if(charcnt>=TotalLength())
		{
			if(!bSkip)
				return;
			bInText=false;
			curdelay=5;
			return;
		}
		if(bSkip)
		{
			charcnt=TotalLength();
			curdelay=5;
		}
		else
			curdelay=tspeed;
	}
	override bool Tick()
	{
		bool bSkip;
		if(!p)
			bSkip=true;	// emergency skip if player disconnects mid-dialogue (don't do this)
		if(!bStarted)
			bStarted=true;
		// here comes the spaghetti code!
		if(delaycnt<curdelay)
		{
			delaycnt++;
			return false;
		}
		curdelay=0;
		delaycnt=0;
		if(bInText)
			AdvanceText(bSkip);
		else
			DialogueSeq();
		return false;
	}
	override void Draw(int bottom,int visibility)
	{
		if(!tfont)
			tfont=Font.GetFont('smallfont');
		if(charcnt>0)
			DrawText();
	}
	private void DrawText()
	{
		if(!lines)
			StartText(savedtext,true);
		if(!tfont)
			tfont=Font.GetFont('smallfont');
		int cur=charcnt;
		Vector2 pos=(80*2,30);
		int vwidth=640,vheight=400;
		int flags=BaseStatusBar.DI_SCREEN_TOP|BaseStatusBar.DI_SCREEN_HCENTER|BaseStatusBar.DI_NOSHADOW;
		StatusBar.DrawImage(icon,(30,50),flags,1.0,scale:(.48,.4));
		for(int i=0;i<lines.Count();i++)
		{
			if(cur<=0)
				break;
			String part=lines.StringAt(i).Left(cur);
			Screen.DrawText(tfont,col,pos.x,pos.y,part,DTA_Bottom320x200,true,DTA_Alpha,1.0,
			DTA_KeepRatio,true,DTA_VirtualWidth,vwidth,DTA_VirtualHeight,vheight);
			pos.y+=tfont.GetHeight()+1;
			cur-=lines.StringAt(i).Length();
		}
	}
}

Class ParanoidMessageHandler : EventHandler
{
	transient int seqtime;
	string msg,icon;
	double typetime;
	PlayerInfo p;
	override void PostUiTick()
	{
		if(seqtime<gametic)
			return;
		let s=mkDialogueSequence(new("mkDialogueSequence")).Init(msg,p,typetime,icon);
		StatusBar.AttachMessage(s,2,BaseStatusBar.HUDMSGLayer_OverHUD);
	}
	static void StartDialogueSequence(PlayerInfo p,string msg,double typetime=0.0,string icon="TNT1A0")
	{
		let dh=ParanoidMessageHandler(EventHandler.Find("ParanoidMessageHandler"));
		if(!dh)
			ThrowAbortException("Dialogue Handler not found!");
		dh.seqtime=gametic;
		dh.p=p;
		dh.msg=msg;
		dh.icon=icon;
		dh.typetime=typetime;
	}
	override void PlayerEntered(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.A_GiveInventory("ParanoidSoundTracker");
	}
}

class ParanoidSoundTracker : Inventory
{
	int playing,countdown;
	override void DoEffect()
	{
		if(countdown ==1 )
			MessageItem.StopMessage(PlayerPawn(owner));
		if(countdown)
			countdown--;
	}
	Default
		{+INVENTORY.UNDROPPABLE}
}
class MessageItem : CustomInventory
{
	override bool TryPickup(in out Actor toucher)
	{
		toucher.A_PlaySound("radiostatic",6,local:1);
		PrintPickupMessage(1,"$NEWMESSAGE");
		return Super.TryPickup(toucher);
	}
	static void StopMessage(actor thisplayer)
	{
		if(!thisplayer)
			return;
		let mytracker=ParanoidSoundTracker(thisplayer.FindInventory("ParanoidSoundTracker"));
		if(!mytracker||!mytracker.playing)
			return;
		if(mytracker.playing!=2)
			thisplayer.A_PlaySound("radiostatic",6,local:1);
		thisplayer.A_StopSound(7);
		mytracker.playing=0;
		ParanoidMessageHandler.StartDialogueSequence(thisplayer.player,"");
	}
	static void PlayMessage(actor thisplayer,string message,string icon="TNT1A0",int dur=0)
	{
		if(!thisplayer)
			return;
		let mytracker=ParanoidSoundTracker(thisplayer.FindInventory("ParanoidSoundTracker"));
		if(!mytracker)
			return;
		int playing=mytracker.playing;
		if(playing==2)
			return;
		if(playing==1)
		{
			StopMessage(thisplayer);
			if(icon!="TNT1A0")
				return;
		}
		if(icon=="TNT1A0")
			playing=2;
		else
			playing=1;
		mytracker.playing=playing;
		if(mytracker.playing!=2)
			thisplayer.A_PlaySound("radiostatic",6,local:1);
		thisplayer.A_PlaySound(message,7,attenuation:ATTN_STATIC);//,local:1);	//local makes it uninterruptible...
		string msg=StringTable.Localize("$"..message);
		int ticdur;
		double doubledur, typetime;
		if(dur)
			doubledur = dur;
		else
			doubledur = S_GetLength(message);
		typetime = doubledur / double(msg.Length());
		ticdur = ceil(doubledur * TICRATE);
		mytracker.countdown = ticdur;
		ParanoidMessageHandler.StartDialogueSequence(thisplayer.player,message,typetime,icon);
	}
	string Portrait;
	Property Portrait:Portrait;
	Default
	{
		Tag "Message";
		Inventory.UseSound "";
		MessageItem.Portrait "TNT1A0";
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	States
	{
	Use:
		TNT1 A 0
		{
			String s=invoker.GetClassName();
			PlayMessage(PlayerPawn(invoker.owner),s.Mid(11,8),invoker.Portrait);
		}
		Fail;
	}
}

class MessageItemHintman : MessageItem
	{Default{MessageItem.Portrait "HINTMAN";}}
class MessageItemHintman01 : MessageItemHintman
	{Default{Inventory.Icon "MAIL01";}}
class MessageItemHintman02 : MessageItemHintman
	{Default{Inventory.Icon "MAIL02";}}
class MessageItemHintman03 : MessageItemHintman
	{Default{Inventory.Icon "MAIL03";}}
class MessageItemHintman04 : MessageItemHintman
	{Default{Inventory.Icon "MAIL04";}}

class MessageItemStinson : MessageItem
	{Default{MessageItem.Portrait "STINSON";}}
class MessageItemStinson01 : MessageItemStinson
	{Default{Inventory.Icon "MAIL01";}}
class MessageItemStinson02 : MessageItemStinson
	{Default{Inventory.Icon "MAIL02";}}
class MessageItemStinson03 : MessageItemStinson
	{Default{Inventory.Icon "MAIL03";}}

class MessageItemUndernet : MessageItem
	{Default{MessageItem.Portrait "UNDERNET";}}
class MessageItemUndernet02 : MessageItemUndernet
	{Default{Inventory.Icon "MAIL02";}}

class MessageItemP1M2VOX1 : MessageItemHintman01{}	//P1M2: Message 1
class MessageItemP1M2VOX2 : MessageItemHintman02{}	//P1M2: Message 2
class MessageItemP1M2VOX3 : MessageItemHintman03{}	//P1M2: Message 3
class MessageItemP1M2VOX4 : MessageItemHintman04{}	//P1M2: Message 4
class MessageItemP1M3VOX1 : MessageItemHintman01{}	//P1M3: Message 1
class MessageItemP1M3VOX2 : MessageItemHintman02{}	//P1M3: Message 2
class MessageItemP1M3VOX3 : MessageItemHintman03{}	//P1M3: Message 3
class MessageItemP1M4VOX1 : MessageItemHintman01{}	//P1M4: Message 1
class MessageItemP1M4VOX2 : MessageItemHintman02{}	//P1M4: Message 2
class MessageItemP1M4VOX3 : MessageItemHintman03{}	//P1M4: Message 3
class MessageItemP1M4VOX4 : MessageItemHintman04{}	//P1M4: Message 4
class MessageItemP1M5VOX1 : MessageItemHintman01{}	//P1M5: Message 1
class MessageItemP1M5VOX2 : MessageItem{}			//P1M5: Message 2
class MessageItemP1M5VOX3 : MessageItem{}			//P1M5: Message 3
class MessageItemP1M6VOX1 : MessageItemHintman01{}	//P1M6: Message 1
class MessageItemP1M6VOX2 : MessageItemHintman02{}	//P1M6: Message 2
class MessageItemP1M6VOX3 : MessageItemHintman03{}	//P1M6: Message 3
class MessageItemP1M6VOX4 : MessageItem{}			//P1M6: Message 4
class MessageItemP1M6VOX5 : MessageItem{}			//P1M6: Message 5
class MessageItemP1M6VOX6 : MessageItem{}			//P1M6: Message 6
class MessageItemP1M6VOX7 : MessageItem{}			//P1M6: Message 7
class MessageItemP1M7VOX1 : MessageItemHintman01{}	//P1M7: Message 1
class MessageItemP1M7VOX2 : MessageItemHintman02{}	//P1M7: Message 2
class MessageItemP1M7VOX3 : MessageItem{}			//P1M7: Message 3
class MessageItemP1M8VOX1 : MessageItemHintman01{}	//P1M8: Message 1
class MessageItemP1M8VOX2 : MessageItemHintman02{}	//P1M8: Message 2

class MessageItemP2M1VOX1 : MessageItemStinson01{}	//P2M1: Message 1
class MessageItemP2M2VOX1 : MessageItemStinson01{}	//P2M2: Message 1
class MessageItemP2M2VOX2 : MessageItem{}			//P2M2: Message 2
class MessageItemP2M3VOX1 : MessageItemStinson01{}	//P2M3: Message 1
class MessageItemP2M3VOX2 : MessageItemUndernet02{}	//P2M3: Message 2
class MessageItemP2M4VOX1 : MessageItemStinson01{}	//P2M4: Message 1
class MessageItemP2M4VOX2 : MessageItemUndernet02{}	//P2M4: Message 2
class MessageItemP2M5VOX1 : MessageItemStinson01{}	//P2M5: Message 1
class MessageItemP2M5VOX2 : MessageItemStinson02{}	//P2M5: Message 2
class MessageItemP2M6VOX1 : MessageItemStinson01{}	//P2M6: Message 1
class MessageItemP2M7VOX1 : MessageItemStinson01{}	//P2M7: Message 1
class MessageItemP2M7VOX2 : MessageItemUndernet02{}	//P2M7: Message 2
class MessageItemP2M7VOX3 : MessageItemStinson03{}	//P2M7: Message 3
class MessageItemP2M8VOX1 : MessageItemStinson01{}	//P2M8: Message 1