class ParanoidWeapon : Weapon
{
	meta bool UnderwaterWeapon;

	Property Underwater: UnderwaterWeapon;

	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		+WEAPON.NOALERT
		+INVENTORY.IGNORESKILL
		+WEAPON.AMMO_CHECKBOTH
		Weapon.BobRangeX 0;
		Weapon.BobRangeY .25;
		Weapon.BobStyle "Smooth";
		ParanoidWeapon.Underwater false;
	}
	States
	{
	Deselect:
		//HLD1 ABCDEFGHIJKLMNO 1;
		TNT1 A 0 A_Lower;
		Wait;
		HLD1 A 0; HLD2 A 0;
		BSD1 A 0; BSD2 A 0;
		SCD1 A 0; SCD2 A 0;
		Stop;
	Select:
		TNT1 A 0 A_Raise(100);
		Loop;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		HLU1 O 0 A_Jump(256,"Ready");
	Fire:
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 1 A_WeaponReady;
		Loop;
	DryFire:
		TNT1 A 0 A_HLCharacterCheck("DryFire");
		HLI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("Reload");
			return ResolveState("Ready");
		}
	Spawn:
		HLS1 A -1;
		Stop;
	OtisSelect1:
		BSU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		BSU1 O 0 A_Jump(256,"Ready");
	OtisReady:
		BSI1 A 1 A_WeaponReady;
		Loop;
	OtisDryFire:
		BSI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("OtisReload");
			return ResolveState("OtisReady");
		}
	ScientistSelect1:
		SCU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		SCU1 O 0 A_Jump(256,"Ready");
	ScientistReady:
		SCI1 A 1 A_WeaponReady;
		Loop;
	ScientistDryFire:
		SCI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("ScientistReload");
			return ResolveState("ScientistReady");
		}
	}
	action void A_HLWeaponReady(int max,bool water=0,class<ammo> am2x=null)
	{
		class<ammo> am2=invoker.ammotype2;
		if(am2x)
			am2=am2x;
		int wepflags,allowreload;
		if(water&&waterlevel==3)
			wepflags=WRF_NOFIRE;
		if(CountInv(am2)<max&&CountInv(invoker.AmmoType1))
			wepflags+=WRF_ALLOWRELOAD;
		A_WeaponReady(wepflags);
	}
	override State GetReadyState()
		{return FindState('Select1');}
	action void A_HLReload(string snd,class<ammo> am2x=null,int amt=0)
	{
		A_PlaySound(snd,CHAN_WEAPON);
		class<ammo> am1=invoker.ammotype1,am2=invoker.ammotype2;
		if(am2x)
			am2=am2x;
		if(!amt)
			amt=GetDefaultByType(am2).MaxAmount;
		if(!am1||!am2)
			return;
		while(CountInv(am2)<amt&&CountInv(am1))
		{
			A_TakeInventory(am1,1,TIF_NOTAKEINFINITE);
			A_GiveInventory(am2);
		}
	}
	action void A_HLShootLead(int sprdxy,int sprdz,int num,int dmg,float climb,string snd,int smoke=1,int smokexy=5,class<ammo> am2x=null)
	{
		A_PlaySound(snd,CHAN_WEAPON);
		A_AlertMonsters();
		A_SpawnItemEx("LighCheapHack");
		for(int i=0;i<smoke;i++)
			A_FireProjectile("GunSmoke",0,0,smokexy,4);
		A_FireBullets(sprdxy,sprdz,num,dmg,"NewPuff1",0);
		A_SetPitch(pitch-climb);
		class<ammo> am2=invoker.ammotype2;
		if(am2x)
			am2=am2x;
		if(am2)
			A_TakeInventory(am2,1);
	}
	action state A_HLDryFireCheck(class<ammo> am2x=null)
	{
		class<ammo> am2=invoker.ammotype2;
		if(am2x)
			am2=am2x;
		if(!CountInv(am2))
			return ResolveState("DryFire");
		return state(null);
	}
	action state A_HLCharacterCheck(name st)
	{
		let me=RolfBellmer(player.mo);
		switch(st)
		{
		case 'Select1':
			if(me.Scientist)
				return ResolveState("ScientistSelect1");
			if(me.Otis)
				return ResolveState("OtisSelect1");
			break;
		case 'Ready':
			if(me.Scientist)
				return ResolveState("ScientistReady");
			if(me.Otis)
				return ResolveState("OtisReady");
			break;
		case 'DryFire':
			if(me.Scientist)
				return ResolveState("ScientistDryFire");
			if(me.Otis)
				return ResolveState("OtisDryFire");
			break;
		case 'Fire':
			if(me.Scientist)
				return ResolveState("ScientistFire");
			if(me.Otis)
				return ResolveState("OtisFire");
			break;
		case 'AltFire':
			if(me.Scientist)
				return ResolveState("ScientistAltFire");
			if(me.Otis)
				return ResolveState("OtisAltFire");
			break;
		case 'Reload':
			if(me.Scientist)
				return ResolveState("ScientistReload");
			if(me.Otis)
				return ResolveState("OtisReload");
			break;
		case 'Fire1':
			if(me.Scientist)
				return ResolveState("ScientistFire1");
			if(me.Otis)
				return ResolveState("OtisFire1");
			break;
		case 'Fire2':
			if(me.Scientist)
				return ResolveState("ScientistFire2");
			if(me.Otis)
				return ResolveState("OtisFire2");
			break;
		case 'Fire2Cont':
			if(me.Scientist)
				return ResolveState("ScientistFire2Cont");
			if(me.Otis)
				return ResolveState("OtisFire2Cont");
			break;
		case 'Fire3':
			if(me.Scientist)
				return ResolveState("ScientistFire3");
			if(me.Otis)
				return ResolveState("OtisFire3");
			break;
		case 'ShotLoop':
			if(me.Scientist)
				return ResolveState("ScientistShotLoop");
			if(me.Otis)
				return ResolveState("OtisShotLoop");
			break;
		case 'PowerDown':
			if(me.Scientist)
				return ResolveState("ScientistPowerDown");
			if(me.Otis)
				return ResolveState("OtisPowerDown");
			break;
		}
		return State(null);
	}
}

class ParanoidWeaponGiver : WeaponGiver
{
	class<ammo> Weapon1,Weapon2;
	int Weapon1Amount;
	Property Weapon1: Weapon1,Weapon1Amount;
	Default
	{
		Radius 0;
		Height 0;
	}
	override void PostBeginPlay()
	{
		class<weapon> wep;
		wep=GetDropItems().Name;
		if(wep==null)
			return;
		if(!height)
			height=GetDefaultByType(wep).height;
		if(!radius)
			A_SetSize(GetDefaultByType(wep).radius);
		if(Weapon1==null)
			Weapon1=GetDefaultByType(wep).AmmoType2;
		Weapon2=GetDefaultByType(wep).AmmoType1;
		if(!Weapon1Amount)
			Weapon1Amount=GetDefaultByType(Weapon1).MaxAmount;
		if(bTOSSED)
			angle=random(0,359);
	}
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
	override String PickupMessage()
	{
		class<inventory> wep;
		wep=GetDropItems().Name;
		return GetDefaultByType(wep).PickupMsg;
	}
	States
	{
	Spawn:
		HLS1 A -1;
		Stop;
	}
}

//****************************************
// Dummy item for light on player weapons
//****************************************

class LighCheapHack : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 3 LIGHT("YellowMediumFlicker3");
		TNT1 A 3 LIGHT("YellowSmallFlicker1");
		Stop;
	}
}

//===============
// Gun Smoke
//===============

class GunSmoke : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Projectile;
		Alpha .33;
		Scale .16;
		RenderStyle "Add";
		+FORCEXYBILLBOARD
		Speed 14;
	}
	States
	{
	Spawn:
		TNT1 A 2 NODELAY A_Stop();
		WPXS A 1 {Frame=(random(0,14));}
		WPXS # 1
		{
			Frame++;
			if(frame>=28)
				SetStateLabel("Null");
			A_FadeOut(.01);
		}
		Wait;
	}
}

class NewPuff1 : Actor replaces BulletPuff
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+NOCLIP
		Scale .2;
		RenderStyle "Add";
		Decal "BulletChip";
	}
	states
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			A_SpawnItemEx("PuffSmoke",zvel:frandom(.25,1));
			if(random(0,1))
				scale.x=-scale.x;
		}
		FX57 ABCDEFGHIJ 2 Bright A_FadeOut;
		Stop;
	}
}

class PuffSmoke : Actor
{
	Default
	{
		Projectile;
		+NOCLIP
		Scale .3;
		RenderStyle "Add";
		Alpha .67;
	}
	States
	{
	Spawn:
		WPXS ACEGIKMOQSUWYZ 2 A_FadeOut;
		Wait;
	}
}

//================
// Weapons & Ammo
//================

class HLCrowbar : ParanoidWeapon
{
	Default
	{
		Tag "Crowbar";
		Height 4;
		Weapon.SelectionOrder 2100;
		Weapon.Kickback 0;
		Inventory.PickupMessage "Picked up a crowbar.";
		Obituary "%k shoved %o's crowbar where the sun don't shine.";
		+WEAPON.MELEEWEAPON
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Inventory.Icon "i_cbar1";
		ParanoidWeapon.Underwater true;
	}
	States
	{
	//Deselect:
		//HLD1 ABCDEFGHIJKL 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto Ready;
	Fire:
		TNT1 A 0 A_HLCharacterCheck("Fire");
		TNT1 A 0 A_Jump(256,"Fire1","Fire2","Fire3");
	Fire1:
		HLF1 A 0 A_JumpIfCloser(80,"FireFast1");
		HLF1 ABC 2;
		HLF1 D 2 A_HLCrowbarHit;
		HLF1 EFGHIJK 2;
		Goto Ready;
	FireFast1:
		HLF1 LMNO 1;
		HLF1 P 1 A_HLCrowbarHit;
		HLF1 QRSTUV 1;
		Goto Ready;
	Fire2:
		HLF1 W 0 A_JumpIfCloser(80,"FireFast2");
		HLF1 WXYZ 2;
		HLF1 [ 2 A_HLCrowbarHit;
		HLF1 \] 2;
		HLF2 ABCDEF 2;
		Goto Ready;
	FireFast2:
		HLF2 HIJKLM 1;
		HLF2 N 1 A_HLCrowbarHit;
		HLF2 OPQRSTU 1;
		Goto Ready;
	Fire3:
		HLF2 V 0 A_JumpIfCloser(80,"FireFast3");
		HLF2 VWXY 2;
		HLF2 Z 2 A_HLCrowbarHit;
		HLF2 [\] 2;
		HLF3 AB 2;
		HLF3 CDEFGHIJK 1;
		Goto Ready;
	FireFast3:
		HLF3 LMNOP 1;
		HLF3 Q 1 A_HLCrowbarHit;
		HLF3 RSTUVWXYZ[\] 1;
		HLF4 A 1;
		Goto Ready;
	OtisSelect1:
		BSU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto OtisReady;
	OtisFire:
		TNT1 A 0 A_Jump(256,"OtisFire1","OtisFire2","OtisFire3");
	OtisFire1:
		BSF1 A 0 A_JumpIfCloser(80,"OtisFireFast1");
		BSF1 ABC 2;
		BSF1 D 2 A_HLCrowbarHit;
		BSF1 EFGHIJK 2;
		Goto OtisReady;
	OtisFireFast1:
		BSF1 LMNO 1;
		BSF1 P 1 A_HLCrowbarHit;
		BSF1 QRSTUV 1;
		Goto OtisReady;
	OtisFire2:
		BSF1 W 0 A_JumpIfCloser(80,"OtisFireFast2");
		BSF1 WXYZ 2;
		BSF1 [ 2 A_HLCrowbarHit;
		BSF1 \] 2;
		BSF2 ABCDEF 2;
		Goto OtisReady;
	OtisFireFast2:
		BSF2 HIJKLM 1;
		BSF2 N 1 A_HLCrowbarHit;
		BSF2 OPQRSTU 1;
		Goto OtisReady;
	OtisFire3:
		BSF2 V 0 A_JumpIfCloser(80,"OtisFireFast3");
		BSF2 VWXY 2;
		BSF2 Z 2 A_HLCrowbarHit;
		BSF2 [\] 2;
		BSF3 AB 2;
		BSF3 CDEFGHIJK 1;
		Goto OtisReady;
	OtisFireFast3:
		BSF3 LMNOP 1;
		BSF3 Q 1 A_HLCrowbarHit;
		BSF3 RSTUVWXYZ[\] 1;
		BSF4 A 1;
		Goto OtisReady;
	ScientistSelect1:
		SCU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto ScientistReady;
	ScientistFire:
		TNT1 A 0 A_Jump(256,"ScientistFire1","ScientistFire2","ScientistFire3");
	ScientistFire1:
		SCF1 A 0 A_JumpIfCloser(80,"ScientistFireFast1");
		SCF1 ABC 2;
		SCF1 D 2 A_HLCrowbarHit;
		SCF1 EFGHIJK 2;
		Goto ScientistReady;
	ScientistFireFast1:
		SCF1 LMNO 1;
		SCF1 P 1 A_HLCrowbarHit;
		SCF1 QRSTUV 1;
		Goto ScientistReady;
	ScientistFire2:
		SCF1 W 0 A_JumpIfCloser(80,"ScientistFireFast2");
		SCF1 WXYZ 2;
		SCF1 [ 2 A_HLCrowbarHit;
		SCF1 \] 2;
		SCF2 ABCDEF 2;
		Goto ScientistReady;
	ScientistFireFast2:
		SCF2 HIJKLM 1;
		SCF2 N 1 A_HLCrowbarHit;
		SCF2 OPQRSTU 1;
		Goto ScientistReady;
	ScientistFire3:
		SCF2 V 0 A_JumpIfCloser(80,"ScientistFireFast3");
		SCF2 VWXY 2;
		SCF2 Z 2 A_HLCrowbarHit;
		SCF2 [\] 2;
		SCF3 AB 2;
		SCF3 CDEFGHIJK 1;
		Goto ScientistReady;
	ScientistFireFast3:
		SCF3 LMNOP 1;
		SCF3 Q 1 A_HLCrowbarHit;
		SCF3 RSTUVWXYZ[\] 1;
		SCF4 A 1;
		Goto ScientistReady;
	}
	action void A_HLCrowbarHit()
	{
		if(player==null)
			return;
		int damage=3*random(1,18);
		for(int i=0;i<16;i++)
		{
			if(TryPunch(angle+i*(12./16),damage)||TryPunch(angle-i*(12./16),damage))
				return;
		}
		//didn't find any creatures, so try to strike any walls
		double slope=AimLineAttack(angle,80);
		LineAttack(angle,80,slope,damage,'Crowbar',"CrowbarPuff2",true);
	}
	private action bool TryPunch(double angle,int damage)
	{
		FTranslatedLineTarget t;
		double slope=AimLineAttack(angle,80,t);
		if(t.linetarget==null)
			return false;
		LineAttack(angle,80,slope,damage,'Crowbar',"CrowbarPuff2",true,t);
		if(t.linetarget==null)
			return false;
		return true;
	}
}

class CrowbarPuff2 : NewPuff1
{
	Default
	{
		+NOEXTREMEDEATH
		+PUFFONACTORS
		ActiveSound "halflife/weapons/CrowbarMiss";
	}
	states
	{
	Spawn:
		TNT1 A 4 NODELAY A_PlaySound("halflife/weapons/Crowbarhitbody",CHAN_WEAPON);
		Stop;
	Crash:
		TNT1 A 0 A_PlaySound("halflife/weapons/Crowbarhit",CHAN_WEAPON);
		Goto Super::Spawn;
	}
}

//=========
// Beretta
//=========

class HLPistolPickup : ParanoidWeaponGiver
	{Default{DropItem "HLPistol";}}

class HLPistol : ParanoidWeapon
{
	Default
	{
		Tag "9mm Pistol";
		Radius 4;
		Height 4;
		Weapon.SelectionOrder 2000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "HLPistolAmmo";
		Weapon.AmmoType2 "HLPistolMag";
		Inventory.PickupMessage "Picked up a 9mm pistol.";
		Obituary "%o was out-gunned by %k's 9mm pistol.";
		Inventory.Icon "i_pist1";
	}
	States
	{
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		TNT1 A 0 A_JumpIf(!CountInv("HLPistolMag"),2);
		HLI1 A 1 A_HLWeaponReady(17);
		Loop;
		HLR2 N 1 A_HLWeaponReady(17);
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		HLF1 A 0 A_HLShootLead(1,1,-1,5,.5,"halflife/weapons/pistol");
		TNT1 A 0 A_HLCharacterCheck("Fire");
		HLF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"Fire2");
		HLF1 BC 1 A_SetPitch(pitch+0.25);
		HLF1 DEFGHIJKL 1;
		HLF1 M 1 A_ReFire;
		HLF1 NOPQRS 1;
		Goto Ready;
	Fire2:
		HLF1 U 1;
		HLF1 VW 1 A_SetPitch(pitch+0.25);
		HLF1 XYZ[\] 1;
		HLF2 ABC 1;
		HLF2 D 1 A_ReFire;
		HLF2 EFGHIJ 1;
		HLF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"Reload");
		HLF2 K 0 A_CheckReload;
		Goto Ready;
	AltFire:
		HLF1 A 0 A_HLDryFireCheck;
		HLF1 A 0 A_HLShootLead(7,7,-1,5,.5,"halflife/weapons/pistol");
		TNT1 A 0 A_HLCharacterCheck("AltFire");
		HLF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"AltFire2");
		HLF1 BC 1 A_SetPitch(pitch+0.25);
		HLF1 DEFG 1;
		HLF1 H 1 A_ReFire;
		HLF1 IJKLMNOPQRS 1;
		Goto Ready;
	AltFire2:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLF1 U 1;
		HLF1 VW 1 A_SetPitch(pitch+0.25);
		HLF1 XYZ[ 1;
		HLF1 \ 1 A_ReFire;
		HLF1 ] 1;
		HLF2 DCBAEFGHIJ 1;
		HLF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"Reload");
		HLF2 K 0 A_CheckReload;
		Goto Ready;
	Reload:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLR1 A 0 A_JumpIf(!CountInv("HLPistolMag"),"Reload2");
		HLR1 ABCDEFGHIJK 1;
		HLR1 L 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		HLR1 MNOPQRSTUVWXYZ[\] 1;
		HLR2 A 1 A_HLReload("halflife/weapons/reload2");
		HLR2 BCDEFGHIJKLM 1;
		Goto Ready;
	Reload2:
		HLR2 NOPQRSTUVWX 1;
		HLR2 Y 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		HLR2 Z[\] 1;
		HLR3 ABCDEFGHIJKLM 1;
		HLR3 N 1 A_HLReload("halflife/weapons/reload2");
		HLR3 OPQRSTUVWXYZ 1;
		Goto Ready;
	OtisReady:
		TNT1 A 0 A_JumpIf(!CountInv("HLPistolMag"),2);
		BSI1 A 1 A_HLWeaponReady(17);
		Loop;
		BSR2 N 1 A_HLWeaponReady(17);
		Loop;
	OtisFire:
		BSF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"Fire2");
		BSF1 BC 1 A_SetPitch(pitch+0.25);
		BSF1 DEFGHIJKL 1;
		BSF1 M 1 A_ReFire;
		BSF1 NOPQRS 1;
		Goto OtisReady;
	OtisFire2:
		BSF1 U 1;
		BSF1 VW 1 A_SetPitch(pitch+0.25);
		BSF1 XYZ[\] 1;
		BSF2 ABC 1;
		BSF2 D 1 A_ReFire;
		BSF2 EFGHIJ 1;
		BSF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"OtisReload");
		BSF2 K 0 A_CheckReload;
		Goto OtisReady;
	OtisAltFire:
		BSF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"OtisAltFire2");
		BSF1 BC 1 A_SetPitch(pitch+0.25);
		BSF1 DEFG 1;
		BSF1 H 1 A_ReFire;
		BSF1 IJKLMNOPQRS 1;
		Goto OtisReady;
	OtisAltFire2:
		BSF1 U 1;
		BSF1 VW 1 A_SetPitch(pitch+0.25);
		BSF1 XYZ[ 1;
		BSF1 \ 1 A_ReFire;
		BSF1 ] 1;
		BSF2 DCBAEFGHIJ 1;
		BSF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"OtisReload");
		BSF2 K 0 A_CheckReload;
		Goto OtisReady;
	OtisReload:
		BSR1 A 0 A_JumpIf(!CountInv("HLPistolMag"),"OtisReload2");
		BSR1 ABCDEFGHIJK 1;
		BSR1 L 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		BSR1 MNOPQRSTUVWXYZ[\] 1;
		BSR2 A 1 A_HLReload("halflife/weapons/reload2");
		BSR2 BCDEFGHIJKLM 1;
		Goto OtisReady;
	OtisReload2:
		BSR2 NOPQRSTUVWX 1;
		BSR2 Y 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		BSR2 Z[\] 1;
		BSR3 ABCDEFGHIJKLM 1;
		BSR3 N 1 A_HLReload("halflife/weapons/reload2");
		BSR3 OPQRSTUVWXYZ 1;
		Goto OtisReady;
	ScientistReady:
		TNT1 A 0 A_JumpIf(!CountInv("HLPistolMag"),2);
		SCI1 A 1 A_HLWeaponReady(17);
		Loop;
		SCR2 N 1 A_HLWeaponReady(17);
		Loop;
	ScientistFire:
		SCF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"Fire2");
		SCF1 BC 1 A_SetPitch(pitch+0.25);
		SCF1 DEFGHIJKL 1;
		SCF1 M 1 A_ReFire;
		SCF1 NOPQRS 1;
		Goto ScientistReady;
	ScientistFire2:
		SCF1 U 1;
		SCF1 VW 1 A_SetPitch(pitch+0.25);
		SCF1 XYZ[\] 1;
		SCF2 ABC 1;
		SCF2 D 1 A_ReFire;
		SCF2 EFGHIJ 1;
		SCF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"ScientistReload");
		SCF2 K 0 A_CheckReload;
		Goto ScientistReady;
	ScientistAltFire:
		SCF1 A 1 A_JumpIf(!CountInv("HLPistolMag"),"ScientistAltFire2");
		SCF1 BC 1 A_SetPitch(pitch+0.25);
		SCF1 DEFG 1;
		SCF1 H 1 A_ReFire;
		SCF1 IJKLMNOPQRS 1;
		Goto ScientistReady;
	ScientistAltFire2:
		SCF1 U 1;
		SCF1 VW 1 A_SetPitch(pitch+0.25);
		SCF1 XYZ[ 1;
		SCF1 \ 1 A_ReFire;
		SCF1 ] 1;
		SCF2 DCBAEFGHIJ 1;
		SCF2 K 0 A_JumpIf(CountInv("HLPistolAmmo"),"ScientistReload");
		SCF2 K 0 A_CheckReload;
		Goto ScientistReady;
	ScientistReload:
		SCR1 A 0 A_JumpIf(!CountInv("HLPistolMag"),"ScientistReload2");
		SCR1 ABCDEFGHIJK 1;
		SCR1 L 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		SCR1 MNOPQRSTUVWXYZ[\] 1;
		SCR2 A 1 A_HLReload("halflife/weapons/reload2");
		SCR2 BCDEFGHIJKLM 1;
		Goto ScientistReady;
	ScientistReload2:
		SCR2 NOPQRSTUVWX 1;
		SCR2 Y 1 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		SCR2 Z[\] 1;
		SCR3 ABCDEFGHIJKLM 1;
		SCR3 N 1 A_HLReload("halflife/weapons/reload2");
		SCR3 OPQRSTUVWXYZ 1;
		Goto ScientistReady;
	}
}
class HLPistolMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 17;
	}
}

//====================
// Beretta Clip
//====================

class HLPistolAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Tag "9mm";
		Radius 8;
		Height 4;
		Inventory.PickupMessage "Picked up a 9mm pistol magazine.";
		Inventory.Amount 17;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 17;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "i_bul1";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

//=====================
// Python (357 Magnum)
//=====================

class HLMagnumPickup : ParanoidWeaponGiver
	{Default{DropItem "HLMagnum";}}

class HLMagnum : ParanoidWeapon
{
	Default
	{
		Tag "Python";
		Radius 4;
		Height 4;
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "HLMagnumAmmo";
		Weapon.AmmoType2 "HLMagnumMag";
		Inventory.PickupMessage "Picked up a .357 Magnum revolver. You Feel Lucky, Punk!?";
		Obituary "%o's armor was pierced by %k's Python.";
		Inventory.Icon "i_pist2";
	}
	States
	{
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 1 A_HLWeaponReady(6,1);
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		TNT1 A 0 A_HLCharacterCheck("Fire");
		HLF1 A 1 A_HLShootLead(0,0,1,85,2.25,"halflife/weapons/magnumshot",2);
		HLF1 BCDEFGHIJ 1 A_SetPitch(pitch+0.25);
		HLF1 KLMNOPQRSTUVWXYZ[\] 1;
		HLF2 A 1;
		HLF2 A 0 A_CheckReload;
		Goto Ready;
	Reload:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR4 ABCDEFGHIJKL 1;
		HLR4 M 1 A_HLReload("halflife/weapons/m357reload");
		HLR4 NOPQRSTUVWX 1;
		Goto Ready;
	OtisReady:
		BSI1 A 1 A_HLWeaponReady(6,1);
		Loop;
	OtisFire:
		BSF1 A 1 A_HLShootLead(0,0,1,85,2.25,"halflife/weapons/magnumshot",2);
		BSF1 BCDEFGHIJ 1 A_SetPitch(pitch+0.25);
		BSF1 KLMNOPQRSTUVWXYZ[\] 1;
		BSF2 A 1;
		BSF2 A 0 A_CheckReload;
		Goto OtisReady;
	OtisReload:
		BSR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR4 ABCDEFGHIJKL 1;
		BSR4 M 1 A_HLReload("halflife/weapons/m357reload");
		BSR4 NOPQRSTUVWX 1;
		Goto OtisReady;
	ScientistReady:
		SCI1 A 1 A_HLWeaponReady(6,1);
		Loop;
	ScientistFire:
		SCF1 A 1 A_HLShootLead(0,0,1,85,2.25,"halflife/weapons/magnumshot",2);
		SCF1 BCDEFGHIJ 1 A_SetPitch(pitch+0.25);
		SCF1 KLMNOPQRSTUVWXYZ[\] 1;
		SCF2 A 1;
		SCF2 A 0 A_CheckReload;
		Goto ScientistReady;
	ScientistReload:
		SCR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR4 ABCDEFGHIJKL 1;
		SCR4 M 1 A_HLReload("halflife/weapons/m357reload");
		SCR4 NOPQRSTUVWX 1;
		Goto ScientistReady;
	}
}
class HLMagnumMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 6;
	}
}

//=============
// Python Ammo
//=============

class HLMagnumAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Tag ".357";
		Radius 4;
		Height 4;
		Inventory.Amount 6;
		Inventory.MaxAmount 36;
		Ammo.BackpackAmount 6;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "i_bul2";
		Inventory.PickupMessage "Picked up a speedloader of .357 Magnum ammo.";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class HLMagnumBox : HLMagnumAmmo
{
	Default
	{
		Radius 6;
		Inventory.PickupMessage "Picked up a box of .357 Magnum ammo.";
		Inventory.Amount 12;
	}
}

//===================
// Paranoid Shotgun
//===================

class HLShotgunPickup : ParanoidWeaponGiver
	{Default{DropItem "HLShotgun";}}

//=============================
// Paranoid Shotgun (Vertical)
//=============================

class HLShotgunPickup2 : HLShotgunPickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}
class HLShotgunPickup3 : HLShotgunPickup2{}

class HLShotgun : ParanoidWeapon
{
	Default
	{
		Tag "Shotgun";
		Height 4;
		Weapon.SelectionOrder 900;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "HLShotgunAmmo";
		Weapon.AmmoType2 "HLShotgunMag";
		Inventory.PickupMessage "Picked up a shotgun.";
		Obituary "%o swallowed %k's lead pellets.";
		Inventory.Icon "i_sgun1";
	}
	States
	{
	//Deselect:
		//HLD1 ABCDEFGHIJKL 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 1 A_HLWeaponReady(8,1);
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		TNT1 A 0 A_HLShootLead(5,5,6,8,1.75,"halflife/weapons/shotgunsingle",1,4);
		HLF1 A 1 A_HLCharacterCheck("Fire");
		HLF1 BCDEFGH 1 A_SetPitch(pitch+0.25);
		HLF1 I 1 A_CheckReload;
		HLF1 JKLMN 1;
		HLF1 O 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HLF1 PQRSTUVWXYZ[\] 1;
		HLF2 A 1;
		HLF2 B 1 A_Refire;
		Goto Ready;
	AltFire:
		TNT1 A 0 A_JumpIf(CountInv("HLShotgunMag")<2,"Fire");	//if less than two, will shoot only one
		TNT1 A 0
		{
			A_HLShootLead(10,10,12,8,3.5,"halflife/weapons/shotgundouble",1,4);
			A_TakeInventory("HLShotgunMag",1,TIF_NOTAKEINFINITE);
		}
		HLF2 C 1 A_HLCharacterCheck("AltFire");
		HLF2 DEFGHIJKLMNOPQ 1 A_SetPitch(pitch+0.25);
		HLF2 RSTUVWXYZ[\ 1;
		HLF2 ] 1 A_CheckReload;
		HLF3 ABC 1;
		HLF3 D 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HLF3 EFGHIJKLMNOPQRST 1;
		HLI1 A 13;
		Goto Ready;
	Reload:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLR1 ABCDEFGH 3;
	ReloadLoop:
		HLR1 JKLM 2;
		HLR1 N 2 A_HLShotgunLoadShell;
		HLR1 OPQR 2;
		HLR1 S 2 A_WeaponReady(WRF_NOBOB);
		HLR1 S 0 A_HLShotgunLoadCheck("ReloadLoop");
		HLR1 TUVW 1;
		HLR1 X 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HLR1 YZ[\] 1;
		HLR2 ABCDEFGHI 1;
		Goto Ready;
	OtisSelect1:
		BSU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	OtisReady:
		BSI1 A 1 A_HLWeaponReady(8,1);
		Loop;
	OtisFire:
		BSF1 A 1;
		BSF1 BCDEFGH 1 A_SetPitch(pitch+0.25);
		BSF1 I 1 A_CheckReload;
		BSF1 JKLMN 1;
		BSF1 O 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		BSF1 PQRSTUVWXYZ[\] 1;
		BSF2 A 1;
		BSF2 B 1 A_Refire;
		Goto OtisReady;
	OtisAltFire:
		BSF2 C 1;
		BSF2 DEFGHIJKLMNOPQ 1 A_SetPitch(pitch+0.25);
		BSF2 RSTUVWXYZ[\ 1;
		BSF2 ] 1 A_CheckReload;
		BSF3 ABC 1;
		BSF3 D 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		BSF3 EFGHIJKLMNOPQRST 1;
		BSI1 A 13;
		Goto OtisReady;
	OtisReload:
		BSR1 ABCDEFGH 3;
	OtisReloadLoop:
		BSR1 JKLM 2;
		BSR1 N 2 A_HLShotgunLoadShell;
		BSR1 OPQR 2;
		BSR1 S 2 A_WeaponReady(WRF_NOBOB);
		BSR1 S 0 A_HLShotgunLoadCheck("OtisReloadLoop");
		BSR1 TUVW 1;
		BSR1 X 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		BSR1 YZ[\] 1;
		BSR2 ABCDEFGHI 1;
		Goto OtisReady;
	ScientistSelect1:
		SCU1 ABCDEFGHIJKL 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	ScientistReady:
		SCI1 A 1 A_HLWeaponReady(8,1);
		Loop;
	ScientistFire:
		SCF1 A 1;
		SCF1 BCDEFGH 1 A_SetPitch(pitch+0.25);
		SCF1 I 1 A_CheckReload;
		SCF1 JKLMN 1;
		SCF1 O 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		SCF1 PQRSTUVWXYZ[\] 1;
		SCF2 A 1;
		SCF2 B 1 A_Refire;
		Goto ScientistReady;
	ScientistAltFire:
		SCF2 C 1;
		SCF2 DEFGHIJKLMNOPQ 1 A_SetPitch(pitch+0.25);
		SCF2 RSTUVWXYZ[\ 1;
		SCF2 ] 1 A_CheckReload;
		SCF3 ABC 1;
		SCF3 D 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		SCF3 EFGHIJKLMNOPQRST 1;
		SCI1 A 13;
		Goto ScientistReady;
	ScientistReload:
		SCR1 ABCDEFGH 3;
	ScientistReloadLoop:
		SCR1 JKLM 2;
		SCR1 N 2 A_HLShotgunLoadShell;
		SCR1 OPQR 2;
		SCR1 S 2 A_WeaponReady(WRF_NOBOB);
		SCR1 S 0 A_HLShotgunLoadCheck("ScientistReloadLoop");
		SCR1 TUVW 1;
		SCR1 X 1 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		SCR1 YZ[\] 1;
		SCR2 ABCDEFGHI 1;
		Goto ScientistReady;
	}
	action void A_HLShotgunLoadShell()
	{
		A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		A_TakeInventory("HLShotgunAmmo",1,TIF_NOTAKEINFINITE);
		A_GiveInventory("HLShotgunMag",1);
	}
	action state A_HLShotgunLoadCheck(statelabel st)
	{
		if(CountInv("HLShotgunMag")<8&&CountInv("HLShotgunAmmo"))
			return ResolveState(st);
		return state(null);
	}
}
class HLShotgunMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 8;
	}
}

//=========================
// Paranoid Shotgun Shells
//=========================

class HLShotgunAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Tag "Shell";
		Radius 4;
		Height 4;
		Inventory.PickupMessage "Picked up three shotgun shells.";
		Inventory.Amount 3;
		Inventory.MaxAmount 125;
		Ammo.BackpackAmount 3;
		Inventory.Icon "i_shel1";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class HLShotgunBox : HLShotgunAmmo
{
	Default
	{
		Radius 6;
		Inventory.PickupMessage "Picked up a box of shotgun shells.";
		Inventory.Amount 12;
	}
}

//===================
// 9mm Assault Rifle
//===================

class HLAssaultRiflePickup : ParanoidWeaponGiver
{
	Default
	{
		ParanoidWeaponGiver.Weapon1 "HLAssaultRifleMag",25;
		DropItem "HLAssaultRifle";
	}
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			toucher.A_GiveInventory("HLGrenadeLauncherAmmo");
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
}

//=============================
// 9mm Assault Rifle (Vertical)
//=============================

class HLAssaultRiflePickup2 : HLAssaultRiflePickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}

class HLAssaultRifle : ParanoidWeapon
{
	Default
	{
		Tag "Assault Rifle";
		Height 4;
		Weapon.SelectionOrder 1000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "HLPistolAmmo";
		Weapon.AmmoType2 "HLAssaultRifleMagEx";
		Inventory.PickupMessage "Picked up a 9mm assault rifle.";
		Obituary "%o felt %k's M4.";
		Inventory.Icon "i_arifl1";
	}
	States
	{
	//Deselect:
		//HLU1 KJIHGFEDCBA 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 ABCDEFGHIJK 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 1 A_HLWeaponReady(50,1,"HLAssaultRifleMag");
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck("HLAssaultRifleMag");
		TNT1 A 0 A_HLShootLead(3,3,-1,5,.5,"halflife/weapons/machinegunshot",1,2,"HLAssaultRifleMag");
		HLF1 A 1 A_HLCharacterCheck("Fire");
		HLF1 BC 1 A_SetPitch(pitch+0.25);
		HLF1 D 1;
		HLF1 E 3 A_Refire;
		HLF1 FG 3;
		Goto Ready;
	AltFire:
		TNT1 A 0 A_HLCharacterCheck("AltFire");
		TNT1 A 0 A_JumpIfInventory("HLGrenadeLauncherAmmo",1,2);
		HLI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Ready;
		HLF1 H 1 A_HLAssaultRifleGrenade;
		HLF1 IJKLMNOP 1 A_SetPitch(pitch+0.25);
		HLF1 QRSTUVWXYZ[\] 1;
		HLF2 ABCDEFGHIJKL 1;
		HLF2 A 0 A_CheckReload;
		Goto Ready;
	Reload:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLR1 ABCDEFG 1;
		HLR1 H 1 A_PlaySound("halflife/weapons/m16cliprelease",CHAN_WEAPON);
		HLR1 IJKLMNOPQRSTUVWXYZ[\] 1;
		HLR2 A 1;
		HLR2 B 1 A_HLReload("halflife/weapons/m16clipinsert","HLAssaultRifleMag",50);
		HLR2 CDEFGHIJKLMNOPQR 1;
		Goto Ready;
	OtisSelect1:
		BSU1 ABCDEFGHIJK 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	OtisReady:
		BSI1 A 1 A_HLWeaponReady(50,1,"HLAssaultRifleMag");
		Loop;
	OtisFire:
		BSF1 A 1;
		BSF1 BC 1 A_SetPitch(pitch+0.25);
		BSF1 D 1;
		BSF1 E 3 A_Refire;
		BSF1 FG 3;
		Goto OtisReady;
	OtisAltFire:
		TNT1 A 0 A_JumpIfInventory("HLGrenadeLauncherAmmo",1,2);
		BSI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto OtisReady;
		BSF1 H 1 A_HLAssaultRifleGrenade;
		BSF1 IJKLMNOP 1 A_SetPitch(pitch+0.25);
		BSF1 QRSTUVWXYZ[\] 1;
		BSF2 ABCDEFGHIJKL 1;
		BSF2 A 0 A_CheckReload;
		Goto OtisReady;
	OtisReload:
		BSR1 ABCDEFG 1;
		BSR1 H 1 A_PlaySound("halflife/weapons/m16cliprelease",CHAN_WEAPON);
		BSR1 IJKLMNOPQRSTUVWXYZ[\] 1;
		BSR2 A 1;
		BSR2 B 1 A_HLReload("halflife/weapons/m16clipinsert","HLAssaultRifleMag",50);
		BSR2 CDEFGHIJKLMNOPQR 1;
		Goto OtisReady;
	ScientistSelect1:
		SCU1 ABCDEFGHIJK 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	ScientistReady:
		SCI1 A 1 A_HLWeaponReady(50,1,"HLAssaultRifleMag");
		Loop;
	ScientistFire:
		SCF1 A 1;
		SCF1 BC 1 A_SetPitch(pitch+0.25);
		SCF1 D 1;
		SCF1 E 3 A_Refire;
		SCF1 FG 3;
		Goto ScientistReady;
	ScientistAltFire:
		TNT1 A 0 A_JumpIfInventory("HLGrenadeLauncherAmmo",1,2);
		SCI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto ScientistReady;
		SCF1 H 1 A_HLAssaultRifleGrenade;
		SCF1 IJKLMNOP 1 A_SetPitch(pitch+0.25);
		SCF1 QRSTUVWXYZ[\] 1;
		SCF2 ABCDEFGHIJKL 1;
		SCF2 A 0 A_CheckReload;
		Goto ScientistReady;
	ScientistReload:
		SCR1 ABCDEFG 1;
		SCR1 H 1 A_PlaySound("halflife/weapons/m16cliprelease",CHAN_WEAPON);
		SCR1 IJKLMNOPQRSTUVWXYZ[\] 1;
		SCR2 A 1;
		SCR2 B 1 A_HLReload("halflife/weapons/m16clipinsert","HLAssaultRifleMag",50);
		SCR2 CDEFGHIJKLMNOPQR 1;
		Goto ScientistReady;
	}
	action void A_HLAssaultRifleGrenade()
	{
		for(int i=0;i<2;i++)
			A_FireProjectile("GunSmoke",0,0,6,6);
		A_PlaySound("halflife/weapons/grenadelaunch",CHAN_WEAPON);
		actor gren=A_FireProjectile("M16Grenade",0,0,5,0,FPF_NOAUTOAIM);
		if(gren!=null)
			gren.vel.z+=2;
		A_AlertMonsters();
		A_SetPitch(pitch-2.0);
		A_TakeInventory("HLGrenadeLauncherAmmo",1,TIF_NOTAKEINFINITE);
	}
}
class HLAssaultRifleMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 50;
	}
}
class HLAssaultRifleMagEx : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 70;
	}
}

class M16Grenade : Actor
{
	Default
	{
		Projectile;
		Speed 20;
		Damage 20;
		Radius 10;
		Height 20;
		-NoGravity
		Gravity .25;
		Decal "Scorch";
	}
	States
	{
	Spawn:
		HLI1 A 1
		{
			A_SetPitch(pitch+10);
			for(int i=0;i<2;i++)
				A_SpawnItemEx("GrenadeTrail",random(1,-3),random(3,-3),2+random(3,-3));
		}
		Loop;
	Death:
		TNT1 A 1
		{
			A_Explode();
			A_SpawnItemEx("ParanoidExplosion");
		}
		Stop;
	}
}

class GrenadeTrail : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		Scale .35;
		RenderStyle "Add";
		Alpha .67;
	}
	States
	{
	Spawn:
		WPXS ABCDEFGIHJKLMNOPQRSTUVWXYZ 1 NODELAY A_FadeOut(.03);
		Wait;
	}
}

//=======================
// Assault Rifle Magazine
//=======================

class HLAssaultRifleAmmo : HLPistolAmmo
{
	Default
	{
		Inventory.PickupMessage "Picked up a 9mm assault rifle magazine.";
		Inventory.Amount 25;
	}
}

class HLAssaultRifleBox : HLPistolAmmo
{
	Default
	{
		Radius 12;
		Height 8;
		Inventory.PickupMessage "Picked up a box of 9mm ammo.";
		Inventory.Amount 50;
	}
}

//=========
// M16Gren
//=========

class HLGrenadeLauncherAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Tag "Grenade";
		Inventory.PickupMessage "Picked up two 40mm grenades.";
		Inventory.Amount 2;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_gren1";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

//=====================
// RPG Launcher
//=====================

class HLRPG : ParanoidWeapon
{
	Default
	{
		Tag "RPG Launcher";
		Radius 32;
		Height 8;
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Inventory.PickupMessage "Picked up an RPG Launcher! Let's blow things up!";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "HLRPGAmmo";
		Inventory.Icon "i_rlau1";
	}
	States
	{
	//Deselect:
		//HLD1 A 1 A_JumpIf(!CountInv("HLRPGAmmo"),"DeselectEmpty");
		//HLD1 BCDEFGHIJKLMNO 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	//DeselectEmpty:
		//HLD1 QRSTUVWXYZ[\] 1;
		//HLD2 AB 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),"SelectEmpty");
		HLU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto Ready;
	SelectEmpty:
		HLU1 QRSTUVWXYZ[\] 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		HLU2 AB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),2);
		HLI1 A 1 A_WeaponReady;
		Loop;
		HLI1 B 1 A_WeaponReady;
		Loop;
	Fire:
		HLF1 A 0
		{
			A_FireProjectile("HLRocket",0,1,5,5);
			A_SetPitch(pitch-4.0);
			A_PlaySound("halflife/weapons/RPGFire",CHAN_WEAPON);
			A_SpawnItemEx("LighCheapHack");
			A_Recoil(7);
		}
		HLF1 A 1 A_HLCharacterCheck("Fire");
		HLF1 BCDEFGHI 1 A_SetPitch(pitch+0.5);
		HLF1 JK 1;
		HLF1 L 14;
		HLR1 A 1 A_CheckReload();
		HLR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR3 AB 1;
		Goto Ready;
	OtisSelect1:
		BSU1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),"OtisSelectEmpty");
		BSU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto OtisReady;
	OtisSelectEmpty:
		BSU1 QRSTUVWXYZ[\] 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		BSU2 AB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	OtisReady:
		BSI1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),2);
		BSI1 A 1 A_WeaponReady;
		Loop;
		BSI1 B 1 A_WeaponReady;
		Loop;
	OtisFire:
		BSF1 A 1;
		BSF1 BCDEFGHI 1 A_SetPitch(pitch+0.5);
		BSF1 JK 1;
		BSF1 L 14;
		BSR1 A 1 A_CheckReload();
		BSR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR3 AB 1;
		Goto OtisReady;
	ScientistSelect1:
		SCU1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),"ScientistSelectEmpty");
		SCU1 ABCDEFGHIJKLMNO 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		Goto ScientistReady;
	ScientistSelectEmpty:
		SCU1 QRSTUVWXYZ[\] 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		SCU2 AB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	ScientistReady:
		SCI1 A 0 A_JumpIf(!CountInv("HLRPGAmmo"),2);
		SCI1 A 1 A_WeaponReady;
		Loop;
		SCI1 B 1 A_WeaponReady;
		Loop;
	ScientistFire:
		SCF1 A 1;
		SCF1 BCDEFGHI 1 A_SetPitch(pitch+0.5);
		SCF1 JK 1;
		SCF1 L 14;
		SCR1 A 1 A_CheckReload();
		SCR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR3 AB 1;
		Goto ScientistReady;
	}
}

class HLRocket : Actor
{
	Default
	{
		Radius 5;
		Height 5;
		Speed 35;
		Damage 70;
		PROJECTILE;
		+EXTREMEDEATH
		+ROCKETTRAIL
		+FORCERADIUSDMG
		Decal "HugeScorch";
	}
	States
	{
	Spawn:
		HLI1 A 1 Bright
		{
			A_SpawnItemEx("RPGTrail2",random(3,-3),random(3,-3),random(3,-3),zvel:frandom(.25,1.25));
			for(int i=0;i<2;i++)
				A_SpawnItemEx("RPGTrail1",random(3,-3),random(3,-3),random(3,-3),zvel:frandom(.25,1.25));
		}
		Loop;
	Death:
		TNT1 A 20
		{
			A_Explode(512,256);
			A_SetScale(2);
			A_SpawnItemEx("ParanoidExplosion",flags:SXF_TRANSFERSCALE);
			Radius_Quake(8,20,0,35,0);
		}
		Stop;
	}
}

class RPGTrail1 : Actor
{
	Default
	{
		+NOCLIP
		+NOGRAVITY
		RenderStyle "Add";
		Alpha .6;
		Scale .4;
	}
	States
	{
	Spawn:
		TNT1 A 2;
	 	SPIR KLMNO 3;
		Stop;
	}
}

class RPGTrail2 : RPGTrail1
{
	Default
	{
		Scale .3;
	}
	States
	{
	Spawn:
		TNT1 A 2;
		WPXS ACEGIKMOQSUWY[] 1;
		Stop;
	}
}

//===================
// RPG Launcher Ammo
//===================

class HLRPGAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Tag "RPG";
		Radius 4;
		Height 20;
		Inventory.PickupMessage "Picked up an RPG round.";
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_rock1";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

//=============
// Cross-Bow
//=============

class HLXBowPickup : ParanoidWeaponGiver
	{Default{DropItem "HLXBow";}}

class HLXBow : ParanoidWeapon
{
	bool zoomtoken;
	Default
	{
		Radius 16;
		Height 8;
		Weapon.AmmoType "HLXBowAmmo";
		Weapon.AmmoType2 "HLXBowMag";
		Weapon.AmmoGive 5;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Inventory.PickupMessage "Picked up a crossbow. Snipe and impale!";
		Tag "Crossbow";
		+WEAPON.NOAUTOFIRE
		Inventory.Icon "i_xbow1";
		ParanoidWeapon.Underwater true;
	}
	States
	{
	Deselect:
		HLD1 A 0
		{
			invoker.ZoomToken=0;
			A_ZoomFactor(1.0,1);
		}
		Goto Super::Deselect;
	Ready:
		HLI1 A 0 A_JumpIf(invoker.ZoomToken,"ReadyZoom");
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 0 A_JumpIf(!CountInv("HLXBowMag"),2);
		HLI1 A 1 A_HLWeaponReady(5);
		Loop;
		HLI1 B 1 A_HLWeaponReady(5);
		Loop;
	ReadyZoom:
		R016 A 1 A_HLWeaponReady(5);
		Goto Ready;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		HLF1 A 0
		{
			A_TakeInventory("HLXBowMag",1);
			A_PlaySound("HLCrossbow/Fire",CHAN_WEAPON);
			A_FireProjectile("XbowBolt",0,0,4,3);
			A_SetPitch(pitch-3.5);
			//Fire1 (shoot and recock)
			if(CountInv("HLXBowMag"))
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire1Zoom");
				else
					return resolvestate("Fire1");
			}
			//Fire2 (shoot, reload, recock)
			else if(CountInv("HLXBowAmmo"))
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire2Zoom");
				else
					return resolvestate("Fire2");
			}
			//Fire3 (shoot, no reload or recock)
			else
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire3Zoom");
				else
					return resolvestate("Fire3");
			}
			return state(null);
		}
	Fire1:
		TNT1 A 0 A_HLCharacterCheck("Fire1");
		HLF1 BD 1;
		HLF1 FHJLNPR 1 A_SetPitch(pitch+0.5);
		HLF1 TVX 1;
		HLF1 Z 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HLF1 \ 1;
		HLF2 ACEGIKMOQSUWY[] 1;
		HLF3 BDFHJLNPRTVXZ\ 1;
		HLF4 AC 1;
		Goto Ready;
	Fire1Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.5);
		R016 A 3;
		R016 A 35 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		Goto Ready;
	Fire2:
		TNT1 A 0 A_HLCharacterCheck("Fire2");
		HLF5 EF 1;
		HLF5 GHIJKLM 1 A_SetPitch(pitch+0.5);
		HLF5 NO 1;
	Fire2Cont:
		TNT1 A 0 A_CrossbowZoomOut;
		HLF5 P 1 A_HLCharacterCheck("Fire2Cont");
		HLF5 QRSTUVWXYZ[\] 1;
		HLF6 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLF7 ABCDEFGHIJKLMNOP 1;
		HLF7 Q 1 A_HLReload("HLCrossbow/Reload");
		HLF7 RSTUVWXYZ[\] 1;
		HLF8 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLF9 ABCDEFGHIJKLMNOPQRSTUVWXY 1;
		Goto Ready;
	Fire2Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.5);
		R016 A 2;
		Goto Fire2Cont;
	Fire3:
		TNT1 A 0 A_HLCharacterCheck("Fire3");
		HLF9 Z[ 1;
		HLF9 \] 1 A_SetPitch(pitch+0.5);
		HLF0 ABCDE 1 A_SetPitch(pitch+0.5);
		HLF0 FGHIJK 1;
		Goto Ready;
	Fire3Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.5);
		R016 A 6;
		Goto Ready;
	Reload:
		TNT1 A 0 A_CrossbowZoomOut;
		HLR1 A 1 A_HLCharacterCheck("Reload");
		HLR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR2 ABCDEFGHIJKLMNOPQRSTUVW 1;
		HLR2 XYZ[\] 1;
		HLR3 ABCDEFGHIJ 1;
		HLR3 K 1 A_HLReload("HLCrossbow/Reload");
		HLR3 LMNOPQRSTUVWXYZ[\] 1;
		HLR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR5 ABCDEFGHIJKLMNOPQRS 1;
		Goto Ready;
	AltFire:
		R016 A 1
		{
			if(invoker.ZoomToken)
				A_CrossbowZoomOut();
			else
			{
				A_PlaySound("BS/Headhunter/ZoomIn",7);
				invoker.ZoomToken=1;
				A_ZoomFactor(5);
			}
		}
		Goto Ready;
	OtisReady:
		BSI1 A 0 A_JumpIf(!CountInv("HLXBowMag"),2);
		BSI1 A 1 A_HLWeaponReady(5);
		Goto Ready;
		BSI1 B 1 A_HLWeaponReady(5);
		Goto Ready;
	OtisFire1:
		BSF1 BD 1;
		BSF1 FHJLNPR 1 A_SetPitch(pitch+0.5);
		BSF1 TVX 1;
		BSF1 Z 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		BSF1 \ 1;
		BSF2 ACEGIKMOQSUWY[] 1;
		BSF3 BDFHJLNPRTVXZ\ 1;
		BSF4 AC 1;
		Goto OtisReady;
	OtisFire2:
		BSF5 EF 1;
		BSF5 GHIJKLM 1 A_SetPitch(pitch+0.5);
		BSF5 NO 1;
	OtisFire2Cont:
		BSF5 PQRSTUVWXYZ[\] 1;
		BSF6 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSF7 ABCDEFGHIJKLMNOP 1;
		BSF7 Q 1 A_HLReload("HLCrossbow/Reload");
		BSF7 RSTUVWXYZ[\] 1;
		BSF8 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSF9 ABCDEFGHIJKLMNOPQRSTUVWXY 1;
		Goto OtisReady;
	OtisFire3:
		BSF9 Z[ 1;
		BSF9 \] 1 A_SetPitch(pitch+0.5);
		BSF0 ABCDE 1 A_SetPitch(pitch+0.5);
		BSF0 FGHIJK 1;
		Goto OtisReady;
	OtisReload:
		BSR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR2 ABCDEFGHIJKLMNOPQRSTUVW 1;
		BSR2 XYZ[\] 1;
		BSR3 ABCDEFGHIJ 1;
		BSR3 K 1 A_HLReload("HLCrossbow/Reload");
		BSR3 LMNOPQRSTUVWXYZ[\] 1;
		BSR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR5 ABCDEFGHIJKLMNOPQRS 1;
		Goto OtisReady;
	ScientistReady:
		SCI1 A 0 A_JumpIf(!CountInv("HLXBowMag"),2);
		SCI1 A 1 A_HLWeaponReady(5);
		Goto Ready;
		SCI1 B 1 A_HLWeaponReady(5);
		Goto Ready;
	ScientistFire1:
		SCF1 BD 1;
		SCF1 FHJLNPR 1 A_SetPitch(pitch+0.5);
		SCF1 TVX 1;
		SCF1 Z 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		SCF1 \ 1;
		SCF2 ACEGIKMOQSUWY[] 1;
		SCF3 BDFHJLNPRTVXZ\ 1;
		SCF4 AC 1;
		Goto ScientistReady;
	ScientistFire2:
		SCF5 EF 1;
		SCF5 GHIJKLM 1 A_SetPitch(pitch+0.5);
		SCF5 NO 1;
	ScientistFire2Cont:
		SCF5 PQRSTUVWXYZ[\] 1;
		SCF6 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCF7 ABCDEFGHIJKLMNOP 1;
		SCF7 Q 1 A_HLReload("HLCrossbow/Reload");
		SCF7 RSTUVWXYZ[\] 1;
		SCF8 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCF9 ABCDEFGHIJKLMNOPQRSTUVWXY 1;
		Goto ScientistReady;
	ScientistFire3:
		SCF9 Z[ 1;
		SCF9 \] 1 A_SetPitch(pitch+0.5);
		SCF0 ABCDE 1 A_SetPitch(pitch+0.5);
		SCF0 FGHIJK 1;
		Goto ScientistReady;
	ScientistReload:
		SCR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR2 ABCDEFGHIJKLMNOPQRSTUVW 1;
		SCR2 XYZ[\] 1;
		SCR3 ABCDEFGHIJ 1;
		SCR3 K 1 A_HLReload("HLCrossbow/Reload");
		SCR3 LMNOPQRSTUVWXYZ[\] 1;
		SCR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR5 ABCDEFGHIJKLMNOPQRS 1;
		Goto ScientistReady;
	}
	action void A_CrossbowZoomOut()
	{
		A_PlaySound("BS/Headhunter/ZoomOut",7);
		invoker.ZoomToken=0;
		A_ZoomFactor(1,1);
	}
}
class HLXBowMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 5;
	}
}

class HLXBowAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		Radius 8;
		Height 4;
		inventory.pickupmessage "Picked up a crossbow bolt.";
		inventory.maxamount 50;
		ammo.backpackamount 5;
		inventory.icon "i_bolt1";
	}
	states
	{
	Spawn:
		HLI1 A -1;
		Stop;
	}
}

class HLXBowBox : HLXBowAmmo
{
	Default
	{
		inventory.amount 5;
		inventory.pickupmessage "Picked up a clip of crossbow bolts.";
	}
}

class XbowBolt : FastProjectile
{
	Default
	{
		PROJECTILE;
		Radius 3;
		Height 5;
		Speed 80;
		Damage 50;
		DeathSound "weapons/crbreak";
		Decal "BulletChip";
		+BLOODSPLATTER
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Loop;
	Xdeath:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitbody",7);
		Stop;
	Death:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitwall",7);
		Stop;
	}
}

class Missile : Rocket
	{Default{Scale 6;}}

//=============
// Gluon Gun
// Developed by Major Cooke for AeOD; modified by DBThanatos & Kappes Buur
//=============

class HLGluonGunPickup : ParanoidWeaponGiver
	{Default{DropItem "HLGluonGun";}}

class HLGluonGun : ParanoidWeapon
{
	int GluonSoundCountdown;
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "HLGluonGunAmmo";
		Weapon.AmmoType2 "HLGluonGunMag";
		Weapon.AmmoGive 40;
		Weapon.SelectionOrder 10333;
		Inventory.PickupMessage "Picked up the Gluon Gun.";
		Tag "Gluon gun";
		Inventory.Icon "i_gluon1";
	}
	States
	{
	//Deselect:
		//HLD1 ABCDEFGHIJKLM 1;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		TNT1 A 0 A_HLCharacterCheck("Select1");
		HLU1 ABCDEFGHIJKLM 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		HLI1 A 1 A_HLWeaponReady(40,1);
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		HLF1 A 0
		{
			invoker.GluonSoundCountdown=35;
			A_PlaySound("weapons/gluonstart",CHAN_WEAPON);
		}
	ShotLoop:
		TNT1 A 0 A_HLCharacterCheck("ShotLoop");
		HLF1 A 1 BRIGHT A_HLEgon1;
		HLF1 B 1 BRIGHT A_HLEgon2;
		HLF1 C 1 BRIGHT A_HLEgon3;
		HLF1 D 1 BRIGHT A_HLEgon2;
		HLF1 D 0 A_HLEgon4;
		HLF1 D 0 A_ReFire("ShotLoop2");
	ShotLoop2:
		HLF1 E 1 BRIGHT A_HLEgon1;
		HLF1 F 1 BRIGHT A_HLEgon2;
		HLF1 G 1 BRIGHT A_HLEgon3;
		HLF1 H 1 BRIGHT A_HLEgon2;
		HLF1 H 0 A_HLEgon4;
		HLF1 H 0 A_ReFire("ShotLoop3");
	ShotLoop3:
		HLF1 I 1 BRIGHT A_HLEgon1;
		HLF1 J 1 BRIGHT A_HLEgon2;
		HLF1 K 1 BRIGHT A_HLEgon3;
		HLF1 L 1 BRIGHT A_HLEgon2;
		HLF1 L 0 A_HLEgon4;
		HLF1 L 0 A_ReFire("ShotLoop4");
	ShotLoop4:
		HLF1 M 1 BRIGHT A_HLEgon1;
		HLF1 N 1 BRIGHT A_HLEgon2;
		HLF1 O 1 BRIGHT A_HLEgon3;
		HLF1 P 1 BRIGHT A_HLEgon2;
		HLF1 P 0 A_HLEgon4;
		HLF1 P 0 A_ReFire("ShotLoop");
	PowerDown:
		HLI1 A 0 A_PlaySound("weapons/gluonoff",CHAN_WEAPON);
		HLI1 A 6 A_HLCharacterCheck("PowerDown");
		Goto Ready;
	Reload:
		HLI1 A 8 A_HLCharacterCheck("Reload");
		HLR1 ABCDEFGHIJKLMNOPQRSTU 1;
		HLR1 V 1 A_HLReload("halflife/weapons/reload1");
		HLR1 WXYZ[\] 1;
		HLR2 A 1;
		HLR2 B 1 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		HLR2 CDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR3 ABC 1;
		Goto Ready;
	OtisSelect1:
		BSU1 ABCDEFGHIJKLM 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	OtisReady:
		BSI1 A 1 A_HLWeaponReady(40,1);
		Loop;
	OtisShotLoop:
		BSF1 A 1 BRIGHT A_HLEgon1;
		BSF1 B 1 BRIGHT A_HLEgon2;
		BSF1 C 1 BRIGHT A_HLEgon3;
		BSF1 D 1 BRIGHT A_HLEgon2;
		BSF1 D 0 A_HLEgon4;
		BSF1 D 0 A_ReFire("OtisShotLoop2");
	OtisShotLoop2:
		BSF1 E 1 BRIGHT A_HLEgon1;
		BSF1 F 1 BRIGHT A_HLEgon2;
		BSF1 G 1 BRIGHT A_HLEgon3;
		BSF1 H 1 BRIGHT A_HLEgon2;
		BSF1 H 0 A_HLEgon4;
		BSF1 H 0 A_ReFire("OtisShotLoop3");
	OtisShotLoop3:
		BSF1 I 1 BRIGHT A_HLEgon1;
		BSF1 J 1 BRIGHT A_HLEgon2;
		BSF1 K 1 BRIGHT A_HLEgon3;
		BSF1 L 1 BRIGHT A_HLEgon2;
		BSF1 L 0 A_HLEgon4;
		BSF1 L 0 A_ReFire("OtisShotLoop4");
	OtisShotLoop4:
		BSF1 M 1 BRIGHT A_HLEgon1;
		BSF1 N 1 BRIGHT A_HLEgon2;
		BSF1 O 1 BRIGHT A_HLEgon3;
		BSF1 P 1 BRIGHT A_HLEgon2;
		BSF1 P 0 A_HLEgon4;
		BSF1 P 0 A_ReFire("OtisShotLoop");
		Goto PowerDown;
	OtisPowerDown:
		BSI1 A 6;
		Goto OtisReady;
	OtisReload:
		BSI1 A 8;
		BSR1 ABCDEFGHIJKLMNOPQRSTU 1;
		BSR1 V 1 A_HLReload("halflife/weapons/reload1");
		BSR1 WXYZ[\] 1;
		BSR2 A 1;
		BSR2 B 1 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		BSR2 CDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR3 ABC 1;
		Goto OtisReady;
	ScientistSelect1:
		SCU1 ABCDEFGHIJKLM 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	ScientistReady:
		SCI1 A 1 A_HLWeaponReady(40,1);
		Loop;
	ScientistShotLoop:
		SCF1 A 1 BRIGHT A_HLEgon1;
		SCF1 B 1 BRIGHT A_HLEgon2;
		SCF1 C 1 BRIGHT A_HLEgon3;
		SCF1 D 1 BRIGHT A_HLEgon2;
		SCF1 D 0 A_HLEgon4;
		SCF1 D 0 A_ReFire("ScientistShotLoop2");
	ScientistShotLoop2:
		SCF1 E 1 BRIGHT A_HLEgon1;
		SCF1 F 1 BRIGHT A_HLEgon2;
		SCF1 G 1 BRIGHT A_HLEgon3;
		SCF1 H 1 BRIGHT A_HLEgon2;
		SCF1 H 0 A_HLEgon4;
		SCF1 H 0 A_ReFire("ScientistShotLoop3");
	ScientistShotLoop3:
		SCF1 I 1 BRIGHT A_HLEgon1;
		SCF1 J 1 BRIGHT A_HLEgon2;
		SCF1 K 1 BRIGHT A_HLEgon3;
		SCF1 L 1 BRIGHT A_HLEgon2;
		SCF1 L 0 A_HLEgon4;
		SCF1 L 0 A_ReFire("ScientistShotLoop4");
	ScientistShotLoop4:
		SCF1 M 1 BRIGHT A_HLEgon1;
		SCF1 N 1 BRIGHT A_HLEgon2;
		SCF1 O 1 BRIGHT A_HLEgon3;
		SCF1 P 1 BRIGHT A_HLEgon2;
		SCF1 P 0 A_HLEgon4;
		SCF1 P 0 A_ReFire("ScientistShotLoop");
		Goto PowerDown;
	ScientistPowerDown:
		SCI1 A 6;
		Goto ScientistReady;
	ScientistReload:
		SCI1 A 8;
		SCR1 ABCDEFGHIJKLMNOPQRSTU 1;
		SCR1 V 1 A_HLReload("halflife/weapons/reload1");
		SCR1 WXYZ[\] 1;
		SCR2 A 1;
		SCR2 B 1 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		SCR2 CDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR3 ABC 1;
		Goto ScientistReady;
	}
	action state A_HLEgon1()
	{
		if(!CountInv("HLGluonGunMag"))
		{
			A_PlaySound("halflife/weapons/noammo",6);
			return resolvestate("PowerDown");
		}
		A_AlertMonsters();
		A_TakeInventory("HLGluonGunMag",1,TIF_NOTAKEINFINITE);
		A_FireProjectile("GluonPrimaryBurst",0,0,4,2);
		A_FireProjectile("GluonFire",0,0,4,2);
		A_FireProjectile("GluonFire2",0,0,4,2);
		A_FireProjectile("GluonFire3",0,0,4,2);
		return state(null);
	}
	action void A_HLEgon2()
		{A_FireProjectile("GluonFakeBurst",0,0,4,2);}
	action void A_HLEgon3()
	{
		A_FireProjectile("GluonPrimaryBurst",0,0,4,2);
		A_FireProjectile("GluonFire4",0,0,4,2);
		A_FireProjectile("GluonFire5",0,0,4,2);
	}
	action void A_HLEgon4()
	{
		invoker.GluonSoundCountdown--;
		if(!invoker.GluonSoundCountdown)
			A_PlaySound("weapons/gluonrun",CHAN_WEAPON,1,1);
	}
	action void A_HLEgonAnimate()
	{
		if(player==null)
			return;
		let weapon=player.ReadyWeapon;
		if(weapon==null)
			return;
		player.GetPSprite(PSP_WEAPON).frame++;
		if(player.GetPSprite(PSP_WEAPON).frame>15)
			player.GetPSprite(PSP_WEAPON).frame=0;
	}
}
class HLGluonGunMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 40;
	}
}

//=========================================
//The main projectiles fired. Their all parents of GluonPrimaryBurst with the only difference
//being the outer-trail spawn locations. I'm going for a spiral after all...
//Skip past GluonPrimaryBurst12 for the effects.
//=========================================

class GluonPrimaryBurst : Actor
{
	int life[2];
	Default
	{
		Speed 2;
		DamageFunction (random(1,6));
		Radius 2;
		Height 2;
		Scale .75;
		Projectile;
		+DONTREFLECT
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+SKYEXPLODE
		+EXPLODEONWATER
		+NOTIMEFREEZE
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("GluonSpiral",0,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
		TNT1 A 0 A_Jump(256,"Movement");
	Movement:
		TNT1 A 0 A_JumpIf(life[0]>=25000,"Death");
		//This must be done multiple times, or else it will jump beyond walls. This could
		//easily cause an engine overload.
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0
		{
			if(life[0]<400&&!CheckIfSeen())
				A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
			life[0]++;
		}
		Loop;
	MoveOut:
		TNT1 A 5;
		Goto Movement;
	Death:
		TNT1 A 1
		{
			A_Explode(random(40,60),75,0);
			A_SpawnItemEx("GluonTrail");
			A_SpawnProjectile("RipperEffect",0,0,0,CMF_AIMDIRECTION|CMF_TRACKOWNER);
		}
		Stop;
	}
}

class GluonFakeBurst : GluonPrimaryBurst
{
	Default
	{
		Damage 0;
		+PAINLESS
		+BLOODLESSIMPACT
		+DONTSPLASH
	}
	States
	{
	Movement:
		TNT1 A 0 A_JumpIf(life[0]>=20000,"Death");
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0
		{
			if(life[0]<4000&&!CheckIfSeen())
				A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
			life[0]++;
		}
		Loop;
	MoveOut:
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonSpiral : Actor
{
	int life;
	Default
	{
		Projectile;
		+DONTREFLECT
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		Radius 5;
		Height 5;
		Speed 5;
		WeaveIndexZ 16;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			int token=target.CountInv("GluonTrailToken");
			if(token)
			{
				for(int i=0;i<token*5;i++)
					A_Weave(-1,-1,1,1);
				if(token>=14)
					A_TakeInventory("GluonTrailToken",giveto:AAPTR_TARGET);
			}
			A_GiveInventory("GluonTrailToken",1,AAPTR_TARGET);
		}
	Moving:
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET|WARPF_INTERPOLATE,1);
		Goto Death;
		TNT1 A 0
		{
			A_Weave(1,1,1,1);
			A_SpawnItemEx("GluonTrailV3");
			life++;
		}
		TNT1 A 0 A_JumpIf(life>=350,"Death");
		Loop;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonTrailToken : Inventory{Default{Inventory.MaxAmount 14;}}

class GluonTrailV2 : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
		Scale .2;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.15,0.15,1]";
		Alpha .25;
	}
	States
	{
	Spawn:
		PLSE B 2 BRIGHT NODELAY
		{
			A_SetScale(frandom(0.2,0.35));
			self.frame=random(1,3);
		}
		Stop;
	}
}

class GluonTrailV3 : GluonTrailV2
{
	Default
	{
		Scale .2;
		Alpha .25;
	}
	States
	{
	Spawn:
		LPUF A 2;
		Stop;
	}
}

class GluonPrimaryBurst2 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,90);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,0);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-90);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,-60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,-30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,0);
		Loop;
	}
}

class GluonPrimaryBurst3 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+1;}}
class GluonPrimaryBurst4 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+2;}}
class GluonPrimaryBurst5 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+3;}}
class GluonPrimaryBurst6 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+4;}}
class GluonPrimaryBurst7 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+5;}}
class GluonPrimaryBurst8 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+6;}}
class GluonPrimaryBurst9 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+7;}}
class GluonPrimaryBurst10 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+8;}}
class GluonPrimaryBurst11 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+9;}}
class GluonPrimaryBurst12 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+10;}}

//The Gluon "flash", which up close, is deadly to those who get in front of the gun.
class GluonFire : Actor
{
	Default
	{
		Speed 20;
		DamageFunction (1);
		Radius 1;
		Height 1;
		Projectile;
		+RIPPER
		+DONTREFLECT
		+EXTREMEDEATH
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

class GluonFire2 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

class GluonFire3 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

class GluonFire4 : GluonFire{Default{Speed 30;}}
class GluonFire5 : GluonFire2{Default{Speed 30;}}

class GluonTrail : Actor
{
	Default
	{
		Scale 1.15;
		Projectile;
		+NOINTERACTION
		RenderStyle "Add";
		Alpha .45;
	}
	States
	{
	Spawn:
		LPUF ABC 2;
		Stop;
	}
}

class GluonExplosion : GluonTrail
{
	Default
	{
		+NOCLIP
		+EXTREMEDEATH
		+FORCERADIUSDMG
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Explode(10,75,0);
		Stop;
	}
}

class GluonOutsideTrailSpawner : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 1 A_SpawnItemEx("GluonTrail");
		Stop;
	}
}

class RipperEffect : Actor
{
	Default
	{
		Projectile;
		+RIPPER
		+EXTREMEDEATH
		+DONTREFLECT
		+PAINLESS
		Speed 1;
		Damage 1;
		Radius 1;
		Height 1;
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

//***************************************************************
class HLGluonGunAmmo : Ammo
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		radius 8;
		height 8;
		inventory.pickupmessage "Picked up some depleted U-235.";
		inventory.amount 20;
		inventory.maxamount 100;
		ammo.backpackamount 20;
		inventory.icon "i_uran1";
	}
	states
	{
	Spawn:
		HLI1 A -1;
		Loop;
	}
}

//****
// Hornet Gun (aka HiveHand)
//****

class HLHornetGun : ParanoidWeapon
{
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Weapon.AmmoType1 "HLHornetGunAmmo";
		Weapon.AmmoType2 "HLHornetGunAmmo";
		Weapon.AmmoGive1 10;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Inventory.PickupMessage "Picked up an alien hornet gun.";
		Tag "Hornet Gun";
		Inventory.Icon "i_hhand1";
	}
	States
	{
	//Deselect:
		//HLD1 ABCDEFGHIJKLMNOPQR 2;
		//TNT1 A 0 A_Lower;
		//Wait;
	Select1:
		HLU1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
		HLU2 A 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	Ready:
		HLI1 A 6
		{
			if(CountInv("HLHornetGunAmmo"))
				A_WeaponReady();
			else
				A_WeaponReady(WRF_NOFIRE);
		}
		HLI1 B 0 A_GiveInventory("HLHornetGunAmmo");
		Loop;
	Fire:
		HLF1 A 1 A_FireHornet;
		HLF1 BCEGHIJ 1;
		Goto Ready;
	AltFire:
		HLF1 A 1 A_FireHornet("HGunHornet2");
		HLF1 CHI 1;
		Goto Ready;
	Flash:
		TNT1 A 1 A_Light2;
		TNT1 A 1 A_Light1;
		Goto LightDone;
	}
	action void A_FireHornet(class<actor> hornet="HGunHornet")
	{
		A_PlaySound("halflife/monsters/hornetgrunt/flysight",CHAN_WEAPON,0.6,0);
		A_FireProjectile(hornet,0,1,8,0);
	}
}

class HLHornetGunAmmo : Ammo
{
	Default
	{
		Inventory.MaxAmount 10;
		+INVENTORY.IGNORESKILL
		inventory.icon "i_horn1";
	}
}

class HGunHornet : Actor
{
	class<actor> trail;
	Property trail:trail;
	Default
	{
		Radius 4;
		Height 4;
		Speed 20;
		Damage 5;
		+SEEKERMISSILE
		Projectile;
		HGunHornet.Trail "HGHornetTrail";
	}
	States
	{
	Spawn:
		HLI1 ABCD 1 BRIGHT A_HornetFly(SMF_LOOK);
		Loop;
	Death:
	Crash:
		TNT1 A 1
		{
			bool num;
			actor hornet;
			[num,hornet]=A_SpawnItemEx("HGHornetShooter1");
			if(bSEEKERMISSILE)
				hornet.bSEEKERMISSILE=1;
			A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		}
		Stop;
	XDeath:
		TNT1 A 0 A_PlaySound("halflife/monsters/hornetgrunt/flyhit");
		Stop;
	}
	void A_HornetFly(int flg=0)
	{
		A_SpawnItemEx(trail);
		if(bSEEKERMISSILE)
			A_SeekerMissile(2,2,flg,90,3);
	}
}

class HGunHornet2 : HGunHornet
{
	Default
	{
		Speed 10;
		-SEEKERMISSILE
	}
	States
	{
	Spawn:
		HLI1 ABCD 1 BRIGHT A_HornetFly;
		Loop;
	}
}

class HGruntHornet : HGunHornet2
{
	Default
	{
		HGunHornet.Trail "HGHornetTrail";
		Radius 8;
		Height 12;
		Speed 17;
		Damage 4;
		DamageType "Hornet";
		SeeSound "halflife/monsters/hornetgrunt/flysight";
		+SEEKERMISSILE
	}
}

class HGHornetShooter1 : Actor
{
	Default
	{
		+FRIENDLY
		+ISMONSTER
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOCLIP
		+LOOKALLAROUND
	}
	States
	{
	Spawn:
		TNT1 A 1 NODELAY A_Look;
		TNT1 A 0
		{
			if(CheckIfCloser(target,128))
			{
				A_FaceTarget();
				let hornet=HGruntHornetFake(A_SpawnProjectile("HGruntHornetFake",0));
				hornet.countdown=1;
				return;
			}
			int zvel=2,ang=90;
			if(random(0,1))
			{
				zvel=5;
				ang=-90;
			}
			bool num;
			actor hornet;
			[num,hornet]=A_SpawnItemEx("HGruntHornetFake",0,0,0,10,0,random(0-zvel,zvel),ang);
			if(!bSEEKERMISSILE)
			{
				hornet.frame=0;
				let thishorn=HGruntHornetFake(hornet);
				thishorn.trail="HGHornetTrail2";
			}
		}
		Stop;
	}
}

class HGruntHornetFake : HGruntHornet
{
	int countdown;
	Default
	{
		SeeSound "";
	}
	States
	{
	Spawn:
		HLI1 ABCD 1 NODELAY
		{
			if(countdown>=1)
			{
				countdown++;
				if(countdown>=21)
					return resolvestate("Death");
			}
			else
				A_HornetFly();
			return state(null);
		}
		Loop;
	Death:
	Crash:
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
	}
}

class HGHornetTrail : Actor
{
	Default
	{
		radius 6;
		height 8;
		+NOINTERACTION
		Scale .015;
		RenderStyle "Add";
		Translation "80:111=160:167";
	}
	states
	{
	Spawn:
		X099 A 1 A_FadeOut(.03);
		Loop;
	}
}

class HGHornetTrail2 : HGHornetTrail
{
	Default
	{
		Alpha .5;
		Translation "80:111=192:223";
	}
}

//============
// Ammo Pack
//============

class AmmoPack : CustomInventory
{
	Default
	{
		Radius 6;
		Height 24;
		Inventory.PickupSound "misc/ammo_pkup";
		Inventory.PickupMessage "Picked up an AmmoPack!";
	}
	States
	{
	Spawn:
		HLI1 A -1;
		Stop;
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("HLPistolAmmo",25);
			A_GiveInventory("HLShotgunAmmo",4);
			A_GiveInventory("HLMagnumAmmo",6);
			A_GiveInventory("HLRPGAmmo");
			A_GiveInventory("HLXBowAmmo",2);
			A_GiveInventory("HLGluonGunAmmo",10);
		}
		Stop;
	}
}

//Bonus: Desert Eagle
class HLDesertEaglePickup : ParanoidWeaponGiver
	{Default{DropItem "HLDesertEagle";}}

class HLDesertEagle : HLMagnum
{
	bool lasersight;
	Default
	{
		Tag "Desert Eagle";
		Weapon.SelectionOrder 1500;
		Weapon.AmmoType2 "HLDesertEagleMag";
		Inventory.PickupMessage "Picked up a Desert Eagle .357 Magnum.";
		Obituary "%o was blasted by %k's Desert Eagle.";
		Inventory.Icon "i_pist3";
	}
	States
	{
	Ready:
		TNT1 A 0 A_HLCharacterCheck("Ready");
		TNT1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),2);
		HLI1 A 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
		HLR2 N 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
	Fire:
		HLF1 A 0 A_HLDryFireCheck;
		HLF1 A 0
		{
			A_HLDeagleLaser();
			int sprd=7;
			if(invoker.lasersight)
				sprd=0;
			A_HLShootLead(sprd,sprd,-1,72,2.25,"halflife/weapons/deagleshot",2);
		}
		TNT1 A 0 A_HLCharacterCheck("Fire");
		HLF1 A 1 A_JumpIf(!CountInv("HLDesertEagleMag"),"Fire2");
		HLF1 BCDEFGHIJ 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		HLF1 K 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		HLF1 LMNOPQRST 1 A_HLDeagleLaser;
		HLF1 A 0 A_ReFire;
		Goto Ready;
	Fire2:
		HLF1 UVWXYZ[\] 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		HLF2 A 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		HLF2 B 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		HLF2 CDEFGHIJK 1 A_HLDeagleLaser;
		HLF2 K 0 A_ReFire;
		HLF2 K 0 A_JumpIf(CountInv("HLMagnumAmmo"),"Reload");
		HLF2 K 0 A_CheckReload;
		Goto Ready;
	AltFire:
		HLI1 A 0
		{
			invoker.lasersight=!invoker.lasersight;
			A_PlaySound("halflife/weapons/deaglelaser",CHAN_WEAPON);
		}
		TNT1 A 0 A_HLCharacterCheck("AltFire");
		HLI1 AAAAAAAAAA 1
		{
			A_HLDeagleLaser();
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		}
		Goto Ready;
	DryFire:
		HLI1 A 0 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		TNT1 A 0 A_HLCharacterCheck("DryFire");
		HLI1 AAAAA 1 A_HLDeagleLaser();
		HLI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("Reload");
			return ResolveState("Ready");
		}
	Reload:
		TNT1 A 0 A_HLCharacterCheck("Reload");
		HLR1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),"Reload2");
		HLR1 A 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		HLR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HLR2 A 1 A_HLReload("");
		HLR2 BCDEFGHIJKLM 1;
		Goto Ready;
	Reload2:
		HLR2 N 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		HLR2 OPQRSTUVWXYZ[\] 1;
		HLR3 ABCDEFGHIJKLM 1;
		HLR3 N 1 A_HLReload("");
		HLR3 OPQRSTUVWXYZ 1;
		Goto Ready;
	OtisReady:
		TNT1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),2);
		BSI1 A 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
		BSR2 N 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
	OtisFire:
		BSF1 A 1 A_JumpIf(!CountInv("HLDesertEagleMag"),"OtisFire2");
		BSF1 BCDEFGHIJ 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		BSF1 K 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		BSF1 LMNOPQRST 1 A_HLDeagleLaser;
		BSF1 A 0 A_ReFire;
		Goto OtisReady;
	OtisFire2:
		BSF1 UVWXYZ[\] 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		BSF2 A 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		BSF2 B 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		BSF2 CDEFGHIJK 1 A_HLDeagleLaser;
		BSF2 K 0 A_ReFire;
		BSF2 K 0 A_JumpIf(CountInv("HLMagnumAmmo"),"OtisReload");
		BSF2 K 0 A_CheckReload;
		Goto OtisReady;
	OtisAltFire:
		BSI1 AAAAAAAAAA 1
		{
			A_HLDeagleLaser();
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		}
		Goto OtisReady;
	OtisDryFire:
		BSI1 AAAAA 1 A_HLDeagleLaser();
		BSI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("OtisReload");
			return ResolveState("OtisReady");
		}
	OtisReload:
		BSR1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),"OtisReload2");
		BSR1 A 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		BSR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		BSR2 A 1 A_HLReload("");
		BSR2 BCDEFGHIJKLM 1;
		Goto OtisReady;
	OtisReload2:
		BSR2 N 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		BSR2 OPQRSTUVWXYZ[\] 1;
		BSR3 ABCDEFGHIJKLM 1;
		BSR3 N 1 A_HLReload("");
		BSR3 OPQRSTUVWXYZ 1;
		Goto OtisReady;
	ScientistReady:
		TNT1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),2);
		SCI1 A 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
		SCR2 N 1
		{
			A_HLDeagleLaser();
			A_HLWeaponReady(7,1);
		}
		Loop;
	ScientistFire:
		SCF1 A 1 A_JumpIf(!CountInv("HLDesertEagleMag"),"ScientistFire2");
		SCF1 BCDEFGHIJ 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		SCF1 K 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		SCF1 LMNOPQRST 1 A_HLDeagleLaser;
		SCF1 A 0 A_ReFire;
		Goto ScientistReady;
	ScientistFire2:
		SCF1 UVWXYZ[\] 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		SCF2 A 1
		{
			A_HLDeagleLaser();
			A_SetPitch(pitch+0.25);
		}
		SCF2 B 1
		{
			A_HLDeagleLaser();
			if(!invoker.lasersight)
				A_ReFire();
		}
		SCF2 CDEFGHIJK 1 A_HLDeagleLaser;
		SCF2 K 0 A_ReFire;
		SCF2 K 0 A_JumpIf(CountInv("HLMagnumAmmo"),"ScientistReload");
		SCF2 K 0 A_CheckReload;
		Goto ScientistReady;
	ScientistAltFire:
		SCI1 AAAAAAAAAA 1
		{
			A_HLDeagleLaser();
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		}
		Goto ScientistReady;
	ScientistDryFire:
		SCI1 AAAAA 1 A_HLDeagleLaser();
		SCI1 A 0
		{
			if(CountInv(invoker.AmmoType1))
				return ResolveState("ScientistReload");
			return ResolveState("ScientistReady");
		}
	ScientistReload:
		SCR1 A 0 A_JumpIf(!CountInv("HLDesertEagleMag"),"ScientistReload2");
		SCR1 A 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		SCR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		SCR2 A 1 A_HLReload("");
		SCR2 BCDEFGHIJKLM 1;
		Goto ScientistReady;
	ScientistReload2:
		SCR2 N 1 A_PlaySound("halflife/weapons/deaglereload",CHAN_WEAPON);
		SCR2 OPQRSTUVWXYZ[\] 1;
		SCR3 ABCDEFGHIJKLM 1;
		SCR3 N 1 A_HLReload("");
		SCR3 OPQRSTUVWXYZ 1;
		Goto ScientistReady;
	}
	action void A_HLDeagleLaser()
	{
		if(invoker.lasersight)
			LineAttack(angle,MISSILERANGE,pitch,0,'None',"HLLaserSightPuff",LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT);
	}
}
class HLDesertEagleMag : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 7;
	}
}

class HLLaserSightPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+PUFFGETSOWNER
		+DONTSPLASH
		+BLOODLESSIMPACT
		+PUFFONACTORS
		RenderStyle "Add";
		Scale .5;
	}
	States
	{
	Spawn:
		X038 A 2;
		Stop;
	}
}